{
    "--protect-args (-s) option, or you\u2019ll need to escape the whitespace in a way that the  remote": "",
    "--help Print a short help page describing the options available in rsync and exit.  For back\u2010": "              ward-compatibility  with  older versions of rsync, the help will also be output if you\n\n              use the -h option without any other args.\n\n\n\n",
    "--version": "              print the rsync version number and exit.\n\n\n\n",
    "-v, --verbose": "              This option increases the amount of information the daemon  logs  during  its  startup\n\n              phase.   After the client connects, the daemon\u2019s verbosity level will be controlled by\n\n              the options that the client used and the \"max verbosity\" setting in the module\u2019s  con\u2010\n\n              fig section.\n\n\n\n",
    "--info=FLAGS": "              This option lets you have fine-grained control over the information output you want to\n\n              see.  An individual flag name may be followed by a level number, with 0 meaning to si\u2010\n\n              lence that output, 1 being the default output level, and higher numbers increasing the\n\n              output of that flag (for those that support higher levels).  Use  --info=help  to  see\n\n              all the available flag names, what they output, and what flag names are added for each\n\n              increase in the verbose level.  Some examples:\n\n\n\n                  rsync -a --info=progress2 src/ dest/\n\n                  rsync -avv --info=stats2,misc1,flist0 src/ dest/\n\n\n\n              Note that --info=name\u2019s output is affected by the --out-format  and  --itemize-changes\n\n              (-i) options.  See those options for more information on what is output and when.\n\n\n\n              This option was added to 3.1.0, so an older rsync on the server side might reject your\n\n              attempts at fine-grained control (if one or more flags needed to be send to the server\n\n              and  the  server was too old to understand them).  See also the \"max verbosity\" caveat\n\n              above when dealing with a daemon.\n\n\n\n",
    "--debug=FLAGS": "              This option lets you have fine-grained control over the debug output you want to  see.\n\n              An  individual  flag name may be followed by a level number, with 0 meaning to silence\n\n              that output, 1 being the default output level, and higher numbers increasing the  out\u2010\n\n              put  of that flag (for those that support higher levels).  Use --debug=help to see all\n\n              the available flag names, what they output, and what flag names are added for each in\u2010\n\n              crease in the verbose level.  Some examples:\n\n\n\n                  rsync -avvv --debug=none src/ dest/\n\n                  rsync -avA --del --debug=del2,acl src/ dest/\n\n\n\n              Note that some debug messages will only be output when --msgs2stderr is specified, es\u2010\n\n              pecially those pertaining to I/O and buffer debugging.\n\n\n\n              This option was added to 3.1.0, so an older rsync on the server side might reject your\n\n              attempts at fine-grained control (if one or more flags needed to be send to the server\n\n              and the server was too old to understand them).  See also the \"max  verbosity\"  caveat\n\n              above when dealing with a daemon.\n\n\n\n",
    "--msgs2stderr": "              This  option  changes  rsync  to send all its output directly to stderr rather than to\n\n              send messages to the client side via the protocol (which normally  outputs  info  mes\u2010\n\n              sages  via  stdout).  This is mainly intended for debugging in order to avoid changing\n\n              the data sent via the protocol, since the extra protocol data can change what is being\n\n              tested.   The option does not affect the remote side of a transfer without using --re\u2010\n\n              mote-option -- e.g. -M--msgs2stderr.  Also keep in mind that a daemon connection  does\n\n              not  have a stderr channel to send messages back to the client side, so if you are do\u2010\n\n              ing any daemon-transfer debugging using this option, you should start up a daemon  us\u2010\n\n              ing --no-detach so that you can see the stderr output on the daemon side.\n\n\n\n              This  option has the side-effect of making stderr output get line-buffered so that the\n\n              merging of the output of 3 programs happens in a more readable manner.\n\n\n\n",
    "-q, --quiet": "              This option decreases the amount of information you are given during the transfer, no\u2010\n\n              tably  suppressing  information messages from the remote server. This option is useful\n\n              when invoking rsync from cron.\n\n\n\n",
    "--no-motd": "              This option affects the information that is output by the client at  the  start  of  a\n\n              daemon  transfer.  This suppresses the message-of-the-day (MOTD) text, but it also af\u2010\n\n              fects the list of modules that the daemon sends in response to the \"rsync host::\"  re\u2010\n\n              quest  (due to a limitation in the rsync protocol), so omit this option if you want to\n\n              request the list of modules from the daemon.\n\n\n\n",
    "-I, --ignore-times": "              Normally rsync will skip any files that are already the same size and  have  the  same\n\n              modification  timestamp.   This  option turns off this \"quick check\" behavior, causing\n\n              all files to be updated.\n\n\n\n",
    "--size-only": "              This modifies rsync\u2019s \"quick check\" algorithm for finding files that need to be trans\u2010\n\n              ferred,  changing it from the default of transferring files with either a changed size\n\n              or a changed last-modified time to just looking for files that have changed  in  size.\n\n              This  is  useful when starting to use rsync after using another mirroring system which\n\n              may not preserve timestamps exactly.\n\n\n\n",
    "-@, --modify-window": "              When comparing two timestamps, rsync treats the timestamps as being equal if they dif\u2010\n\n              fer by no more than the modify-window value.  The default is 0, which matches just in\u2010\n\n              teger seconds.  If you specify a negative value (and the receiver is at least  version\n\n              3.1.3)  then  nanoseconds will also be taken into account.  Specifying 1 is useful for\n\n              copies to/from MS Windows FAT filesystems, because FAT represents times with a  2-sec\u2010\n\n              ond resolution (allowing times to differ from the original by up to 1 second).\n\n\n\n              If  you  want all your transfers to default to comparing nanoseconds, you can create a\n\n              ~/.popt file and put these lines in it:\n\n\n\n                 rsync alias -a -a@-1\n\n                 rsync alias -t -t@-1\n\n\n\n              With that as the default, you\u2019d need to specify --modify-window=0 (aka -@0)  to  over\u2010\n\n              ride  it  and  ignore nanoseconds, e.g. if you\u2019re copying between ext3 and ext4, or if\n\n              the receiving rsync is older than 3.1.3.\n\n\n\n",
    "-c, --checksum": "              This changes the way rsync checks if the files have been changed and are in need of  a\n\n              transfer.  Without this option, rsync uses a \"quick check\" that (by default) checks if\n\n              each file\u2019s size and time of last modification match between the sender and  receiver.\n\n              This option changes this to compare a 128-bit checksum for each file that has a match\u2010\n\n              ing size.  Generating the checksums means that both sides will expend a  lot  of  disk\n\n              I/O  reading all the data in the files in the transfer (and this is prior to any read\u2010\n\n              ing that will be done to transfer changed files), so this can slow things down signif\u2010\n\n              icantly.\n\n\n\n              The  sending  side generates its checksums while it is doing the file-system scan that\n\n              builds the list of the available files.  The receiver generates its checksums when  it\n\n              is  scanning  for  changed files, and will checksum any file that has the same size as\n\n              the corresponding sender\u2019s file:  files with either a changed size or a changed check\u2010\n\n              sum are selected for transfer.\n\n\n\n              Note that rsync always verifies that each transferred file was correctly reconstructed\n\n              on the receiving side by checking a whole-file checksum that is generated as the  file\n\n              is  transferred,  but that automatic after-the-transfer verification has nothing to do\n\n              with this option\u2019s before-the-transfer \"Does this file need to be updated?\" check.\n\n\n\n              For protocol 30 and beyond (first supported in 3.0.0), the checksum used is MD5.   For\n\n              older protocols, the checksum used is MD4.\n\n\n\n",
    "-a, --archive": "              This  is  equivalent  to  -rlptgoD. It is a quick way of saying you want recursion and\n\n              want to preserve almost everything (with -H being a notable omission).  The  only  ex\u2010\n\n              ception  to  the above equivalence is when --files-from is specified, in which case -r\n\n              is not implied.\n\n\n\n              Note that -a does not preserve hardlinks, because finding multiply-linked files is ex\u2010\n\n              pensive.  You must separately specify -H.\n\n\n\n",
    "--no-OPTION": "              You  may turn off one or more implied options by prefixing the option name with \"no-\".\n\n              Not all options may be prefixed with a \"no-\": only options that are implied  by  other\n\n              options  (e.g. --no-D, --no-perms) or have different defaults in various circumstances\n\n              (e.g. --no-whole-file, --no-blocking-io, --no-dirs).  You may specify either the short\n\n              or  the long option name after the \"no-\" prefix (e.g. --no-R is the same as --no-rela\u2010\n\n              tive).\n\n\n\n              For example: if you want to use -a (--archive) but don\u2019t want -o (--owner), instead of\n\n              converting -a into -rlptgD, you could specify -a --no-o (or -a --no-owner).\n\n\n\n              The  order of the options is important:  if you specify --no-r -a, the -r option would\n\n              end up being turned on, the opposite of -a --no-r.  Note also that the side-effects of\n\n              the --files-from option are NOT positional, as it affects the default state of several\n\n              options and slightly changes the meaning of -a (see the --files-from option  for  more\n\n              details).\n\n\n\n",
    "-r, --recursive": "              This tells rsync to copy directories recursively.  See also --dirs (-d).\n\n\n\n              Beginning  with  rsync  3.0.0, the recursive algorithm used is now an incremental scan\n\n              that uses much less memory than before and begins the transfer after the  scanning  of\n\n              the first few directories have been completed.  This incremental scan only affects our\n\n              recursion algorithm, and does not change a non-recursive transfer.  It  is  also  only\n\n              possible when both ends of the transfer are at least version 3.0.0.\n\n\n\n              Some  options  require  rsync to know the full file list, so these options disable the\n\n              incremental  recursion  mode.    These   include:   --delete-before,   --delete-after,\n\n              --prune-empty-dirs,  and  --delay-updates.   Because  of this, the default delete mode\n\n              when you specify --delete is now --delete-during when both ends of the connection  are\n\n              at  least  3.0.0  (use --del or --delete-during to request this improved deletion mode\n\n              explicitly).  See also the --delete-delay option that is a better  choice  than  using\n\n              --delete-after.\n\n\n\n              Incremental  recursion  can  be  disabled  using  the --no-inc-recursive option or its\n\n              shorter --no-i-r alias.\n\n\n\n",
    "-R, --relative": "              Use relative paths. This means that the full path names specified on the command  line\n\n              are  sent to the server rather than just the last parts of the filenames. This is par\u2010\n\n              ticularly useful when you want to send several different directories at the same time.\n\n              For example, if you used this command:\n\n\n\n                 rsync -av /foo/bar/baz.c remote:/tmp/\n\n\n\n              ...  this  would  create a file named baz.c in /tmp/ on the remote machine. If instead\n\n              you used\n\n\n\n                 rsync -avR /foo/bar/baz.c remote:/tmp/\n\n\n\n              then a file named /tmp/foo/bar/baz.c would be created on the remote machine,  preserv\u2010\n\n              ing  its  full path.  These extra path elements are called \"implied directories\" (i.e.\n\n              the \"foo\" and the \"foo/bar\" directories in the above example).\n\n\n\n              Beginning with rsync 3.0.0, rsync always sends these implied directories as  real  di\u2010\n\n              rectories  in the file list, even if a path element is really a symlink on the sending\n\n              side.  This prevents some really unexpected behaviors when copying the full path of  a\n\n              file  that  you  didn\u2019t realize had a symlink in its path.  If you want to duplicate a\n\n              server-side symlink, include both the symlink via its path, and referent directory via\n\n              its  real  path.   If  you\u2019re dealing with an older rsync on the sending side, you may\n\n              need to use the --no-implied-dirs option.\n\n\n\n              It is also possible to limit the amount of path information that is  sent  as  implied\n\n              directories  for  each path you specify.  With a modern rsync on the sending side (be\u2010\n\n              ginning with 2.6.7), you can insert a dot and a slash into the source path, like this:\n\n\n\n                 rsync -avR /foo/./bar/baz.c remote:/tmp/\n\n\n\n              That would create /tmp/bar/baz.c on the remote machine.  (Note that the  dot  must  be\n\n              followed by a slash, so \"/foo/.\" would not be abbreviated.)  For older rsync versions,\n\n              you would need to use a chdir to limit the source path.   For  example,  when  pushing\n\n              files:\n\n\n\n                 (cd /foo; rsync -avR bar/baz.c remote:/tmp/)\n\n\n\n              (Note  that the parens put the two commands into a sub-shell, so that the \"cd\" command\n\n              doesn\u2019t remain in effect for future commands.)  If you\u2019re pulling files from an  older\n\n              rsync, use this idiom (but only for a non-daemon transfer):\n\n\n\n                 rsync -avR --rsync-path=\"cd /foo; rsync\" \\\n\n                     remote:bar/baz.c /tmp/\n\n\n\n",
    "--no-implied-dirs": "              This  option affects the default behavior of the --relative option.  When it is speci\u2010\n\n              fied, the attributes of the implied directories from the source names are not included\n\n              in  the  transfer.  This means that the corresponding path elements on the destination\n\n              system are left unchanged if they exist, and any missing implied directories are  cre\u2010\n\n              ated  with  default  attributes.  This even allows these implied path elements to have\n\n              big differences, such as being a symlink to a directory on the receiving side.\n\n\n\n              For instance, if a command-line arg or a files-from entry told rsync to  transfer  the\n\n              file  \"path/foo/file\",  the directories \"path\" and \"path/foo\" are implied when --rela\u2010\n\n              tive is used.  If \"path/foo\" is a symlink to \"bar\" on the destination system, the  re\u2010\n\n              ceiving  rsync would ordinarily delete \"path/foo\", recreate it as a directory, and re\u2010\n\n              ceive the file into the new directory.  With --no-implied-dirs,  the  receiving  rsync\n\n              updates  \"path/foo/file\"  using  the existing path elements, which means that the file\n\n              ends up being created in \"path/bar\".  Another way to accomplish this link preservation\n\n              is  to  use the --keep-dirlinks option (which will also affect symlinks to directories\n\n              in the rest of the transfer).\n\n\n\n              When pulling files from an rsync older than 3.0.0, you may need to use this option  if\n\n              the sending side has a symlink in the path you request and you wish the implied direc\u2010\n\n              tories to be transferred as normal directories.\n\n\n\n",
    "-b, --backup": "              With this option, preexisting destination files are renamed as  each  file  is  trans\u2010\n\n              ferred  or deleted.  You can control where the backup file goes and what (if any) suf\u2010\n\n              fix gets appended using the --backup-dir and --suffix options.\n\n\n\n              Note that if you don\u2019t specify --backup-dir, (1) the --omit-dir-times option  will  be\n\n              forced  on,  and  (2) if --delete is also in effect (without --delete-excluded), rsync\n\n              will add a \"protect\" filter-rule for the backup suffix to the end of all your existing\n\n              excludes  (e.g.  -f  \"P *~\").  This will prevent previously backed-up files from being\n\n              deleted.  Note that if you are supplying your own filter rules, you may need to  manu\u2010\n\n              ally  insert  your own exclude/protect rule somewhere higher up in the list so that it\n\n              has a high enough priority to be effective (e.g., if your rules specify a trailing in\u2010\n\n              clusion/exclusion of \u2019*\u2019, the auto-added rule would never be reached).\n\n\n\n",
    "--backup-dir=DIR": "              In  combination with the --backup option, this tells rsync to store all backups in the\n\n              specified directory on the receiving side.  This can be used for incremental  backups.\n\n              You  can additionally specify a backup suffix using the --suffix option (otherwise the\n\n              files backed up in the specified directory will keep their original filenames).\n\n\n\n              Note that if you specify a relative path, the backup directory will be relative to the\n\n              destination  directory,  so  you probably want to specify either an absolute path or a\n\n              path that starts with \"../\".  If an rsync daemon is the receiver, the backup dir  can\u2010\n\n              not  go  outside  the  module\u2019s path hierarchy, so take extra care not to delete it or\n\n              copy into it.\n\n\n\n",
    "--suffix=SUFFIX": "              This option allows you to override the default backup suffix used  with  the  --backup\n\n              (-b)  option. The default suffix is a ~ if no --backup-dir was specified, otherwise it\n\n              is an empty string.\n\n\n\n",
    "-u, --update": "              This forces rsync to skip any files which exist on the destination and have a modified\n\n              time that is newer than the source file.  (If an existing destination file has a modi\u2010\n\n              fication time equal to the source file\u2019s, it will be updated if the sizes are  differ\u2010\n\n              ent.)\n\n\n\n              Note  that this does not affect the copying of dirs, symlinks, or other special files.\n\n              Also, a difference of file format between the sender and receiver is always considered\n\n              to be important enough for an update, no matter what date is on the objects.  In other\n\n              words, if the source has a directory where the destination has a  file,  the  transfer\n\n              would occur regardless of the timestamps.\n\n\n\n              This  option  is  a  transfer rule, not an exclude, so it doesn\u2019t affect the data that\n\n              goes into the file-lists, and thus it doesn\u2019t affect deletions.  It  just  limits  the\n\n              files that the receiver requests to be transferred.\n\n\n\n",
    "--inplace": "              This  option changes how rsync transfers a file when its data needs to be updated: in\u2010\n\n              stead of the default method of creating a new copy of the  file  and  moving  it  into\n\n              place  when it is complete, rsync instead writes the updated data directly to the des\u2010\n\n              tination file.\n\n\n\n              This has several effects:\n\n\n\n              o      Hard links are not broken.  This means the new data  will  be  visible  through\n\n                     other hard links to the destination file.  Moreover, attempts to copy differing\n\n                     source files onto a multiply-linked destination file will result in a  \"tug  of\n\n                     war\" with the destination data changing back and forth.\n\n\n\n              o      In-use binaries cannot be updated (either the OS will prevent this from happen\u2010\n\n                     ing, or binaries that attempt to swap-in their data will misbehave or crash).\n\n\n\n              o      The file\u2019s data will be in an inconsistent state during the transfer  and  will\n\n                     be left that way if the transfer is interrupted or if an update fails.\n\n\n\n              o      A file that rsync cannot write to cannot be updated. While a super user can up\u2010\n\n                     date any file, a normal user needs to be granted write permission for the  open\n\n                     of the file for writing to be successful.\n\n\n\n              o      The  efficiency of rsync\u2019s delta-transfer algorithm may be reduced if some data\n\n                     in the destination file is overwritten before it can be copied  to  a  position\n\n                     later  in  the  file.   This does not apply if you use --backup, since rsync is\n\n                     smart enough to use the backup file as the basis file for the transfer.\n\n\n\n              WARNING: you should not use this option to update files that  are  being  accessed  by\n\n              others, so be careful when choosing to use this for a copy.\n\n\n\n              This  option  is  useful  for transferring large files with block-based changes or ap\u2010\n\n              pended data, and also on systems that are disk bound, not network bound.  It can  also\n\n              help  keep a copy-on-write filesystem snapshot from diverging the entire contents of a\n\n              file that only has minor changes.\n\n\n\n              The option implies --partial (since an interrupted transfer does not delete the file),\n\n              but  conflicts with --partial-dir and --delay-updates.  Prior to rsync 2.6.4 --inplace\n\n              was also incompatible with --compare-dest and --link-dest.\n\n\n\n",
    "--append": "              This causes rsync to update a file by appending data onto the end of the  file,  which\n\n              presumes that the data that already exists on the receiving side is identical with the\n\n              start of the file on the sending side.  If a file needs to be transferred and its size\n\n              on  the  receiver  is  the  same  or  longer  than the size on the sender, the file is\n\n              skipped.  This does not interfere with the updating of a file\u2019s non-content attributes\n\n              (e.g. permissions, ownership, etc.) when the file does not need to be transferred, nor\n\n              does it affect the updating of any non-regular files.  Implies --inplace.\n\n\n\n              The use of --append can be dangerous if you aren\u2019t 100% sure that the files  that  are\n\n              longer have only grown by the appending of data onto the end.  You should thus use in\u2010\n\n              clude/exclude/filter rules to ensure that such a transfer is only affecting files that\n\n              you know to be growing via appended data.\n\n\n\n",
    "--append-verify": "              This  works just like the --append option, but the existing data on the receiving side\n\n              is included in the full-file checksum verification step, which will cause a file to be\n\n              resent  if the final verification step fails (rsync uses a normal, non-appending --in\u2010\n\n              place transfer for the resend).\n\n\n\n              Note: prior to rsync 3.0.0, the --append option worked like --append-verify, so if you\n\n              are interacting with an older rsync (or the transfer is using a protocol prior to 30),\n\n              specifying either append option will initiate an --append-verify transfer.\n\n\n\n",
    "-d, --dirs": "              Tell the sending side to include any directories that are encountered.   Unlike  --re\u2010\n\n              cursive,  a directory\u2019s contents are not copied unless the directory name specified is\n\n              \".\" or ends with a trailing slash (e.g. \".\", \"dir/.\", \"dir/\", etc.).  Without this op\u2010\n\n              tion  or  the  --recursive  option, rsync will skip all directories it encounters (and\n\n              output a message to that effect for each one).  If you specify both --dirs  and  --re\u2010\n\n              cursive, --recursive takes precedence.\n\n\n\n              The --dirs option is implied by the --files-from option or the --list-only option (in\u2010\n\n              cluding an implied --list-only usage) if --recursive wasn\u2019t specified (so that  direc\u2010\n\n              tories  are  seen  in the listing).  Specify --no-dirs (or --no-d) if you want to turn\n\n              this off.\n\n\n\n              There is also a backward-compatibility helper option,  --old-dirs  (or  --old-d)  that\n\n              tells  rsync  to  use  a hack of \"-r --exclude=\u2019/*/*\u2019\" to get an older rsync to list a\n\n              single directory without recursing.\n\n\n\n",
    "-l, --links": "              When symlinks are encountered, recreate the symlink on the destination.\n\n\n\n",
    "-L, --copy-links": "              When symlinks are encountered, the item that they point to (the referent)  is  copied,\n\n              rather  than  the  symlink.   In  older  versions  of  rsync, this option also had the\n\n              side-effect of telling the receiving side to follow symlinks, such as symlinks to  di\u2010\n\n              rectories.  In a modern rsync such as this one, you\u2019ll need to specify --keep-dirlinks\n\n              (-K) to get this extra behavior.  The only exception is when sending files to an rsync\n\n              that  is  too  old to understand -K -- in that case, the -L option will still have the\n\n              side-effect of -K on that older receiving rsync.\n\n\n\n",
    "--copy-unsafe-links": "              This tells rsync to copy the referent of symbolic links that point outside the  copied\n\n              tree.  Absolute symlinks are also treated like ordinary files, and so are any symlinks\n\n              in the source path itself when --relative is used.  This option has no additional  ef\u2010\n\n              fect if --copy-links was also specified.\n\n\n\n",
    "--safe-links": "              This tells rsync to ignore any symbolic links which point outside the copied tree. All\n\n              absolute symlinks are also ignored. Using this option in conjunction  with  --relative\n\n              may give unexpected results.\n\n\n\n",
    "--munge-links": "              This option tells rsync to (1) modify all symlinks on the receiving side in a way that\n\n              makes them unusable but recoverable (see below), or (2) to  unmunge  symlinks  on  the\n\n              sending  side  that  had  been  stored in a munged state.  This is useful if you don\u2019t\n\n              quite trust the source of the data to not try to slip in a  symlink  to  a  unexpected\n\n              place.\n\n\n\n              The  way  rsync  disables  the  use  of symlinks is to prefix each one with the string\n\n              \"/rsyncd-munged/\".  This prevents the links from being used as long as that  directory\n\n              does not exist.  When this option is enabled, rsync will refuse to run if that path is\n\n              a directory or a symlink to a directory.\n\n\n\n              The option only affects the client side of the transfer, so if you need it  to  affect\n\n              the  server,  specify  it  via  --remote-option.   (Note that in a local transfer, the\n\n              client side is the sender.)\n\n\n\n              This option has no affect on a daemon, since the daemon configures  whether  it  wants\n\n              munged  symlinks  via  its  \"munge symlinks\" parameter.  See also the \"munge-symlinks\"\n\n              perl script in the support directory of the source code.\n\n\n\n",
    "-k, --copy-dirlinks": "              This option causes the sending side to treat a symlink to a  directory  as  though  it\n\n              were  a  real directory.  This is useful if you don\u2019t want symlinks to non-directories\n\n              to be affected, as they would be using --copy-links.\n\n\n\n              Without this option, if the sending side has replaced a directory with a symlink to  a\n\n              directory,  the receiving side will delete anything that is in the way of the new sym\u2010\n\n              link, including a directory hierarchy (as long as --force or --delete is in effect).\n\n\n\n              See also --keep-dirlinks for an analogous option for the receiving side.\n\n\n\n              --copy-dirlinks applies to all symlinks to directories in the source.  If you want  to\n\n              follow  only  a  few  specified symlinks, a trick you can use is to pass them as addi\u2010\n\n              tional source args with a trailing slash, using --relative to make the paths match  up\n\n              right.  For example:\n\n\n\n              rsync -r --relative src/./ src/./follow-me/ dest/\n\n\n\n              This  works  because rsync calls lstat(2) on the source arg as given, and the trailing\n\n              slash makes lstat(2) follow the symlink, giving rise to a directory in  the  file-list\n\n              which overrides the symlink found during the scan of \"src/./\".\n\n\n\n",
    "-K, --keep-dirlinks": "              This  option  causes the receiving side to treat a symlink to a directory as though it\n\n              were a real directory, but only if it matches a real directory from the sender.  With\u2010\n\n              out  this option, the receiver\u2019s symlink would be deleted and replaced with a real di\u2010\n\n              rectory.\n\n\n\n              For example, suppose you transfer a directory \"foo\" that contains a file  \"file\",  but\n\n              \"foo\"  is  a symlink to directory \"bar\" on the receiver.  Without --keep-dirlinks, the\n\n              receiver deletes symlink \"foo\", recreates it as a directory,  and  receives  the  file\n\n              into  the  new  directory.   With  --keep-dirlinks, the receiver keeps the symlink and\n\n              \"file\" ends up in \"bar\".\n\n\n\n              One note of caution:  if you use --keep-dirlinks, you must trust all the  symlinks  in\n\n              the  copy!  If it is possible for an untrusted user to create their own symlink to any\n\n              directory, the user could then (on a subsequent copy) replace the symlink with a  real\n\n              directory  and  affect  the content of whatever directory the symlink references.  For\n\n              backup copies, you are better off using something like a bind mount instead of a  sym\u2010\n\n              link to modify your receiving hierarchy.\n\n\n\n              See also --copy-dirlinks for an analogous option for the sending side.\n\n\n\n",
    "-H, --hard-links": "              This  tells  rsync  to  look for hard-linked files in the source and link together the\n\n              corresponding files on the destination.  Without this option, hard-linked files in the\n\n              source are treated as though they were separate files.\n\n\n\n              This option does NOT necessarily ensure that the pattern of hard links on the destina\u2010\n\n              tion exactly matches that on the source.  Cases in which the destination  may  end  up\n\n              with extra hard links include the following:\n\n\n\n              o      If  the  destination  contains extraneous hard-links (more linking than what is\n\n                     present in the source file list), the copying algorithm will not break them ex\u2010\n\n                     plicitly.   However,  if one or more of the paths have content differences, the\n\n                     normal file-update process will break those extra links (unless you  are  using\n\n                     the --inplace option).\n\n\n\n              o      If you specify a --link-dest directory that contains hard links, the linking of\n\n                     the destination files against the --link-dest files can cause some paths in the\n\n                     destination to become linked together due to the --link-dest associations.\n\n\n\n              Note  that rsync can only detect hard links between files that are inside the transfer\n\n              set.  If rsync updates a file that has extra hard-link connections  to  files  outside\n\n              the  transfer,  that  linkage will be broken.  If you are tempted to use the --inplace\n\n              option to avoid this breakage, be very careful that you know how your files are  being\n\n              updated  so  that  you  are certain that no unintended changes happen due to lingering\n\n              hard links (and see the --inplace option for more caveats).\n\n\n\n              If incremental recursion is active (see --recursive), rsync  may  transfer  a  missing\n\n              hard-linked  file before it finds that another link for that contents exists elsewhere\n\n              in the hierarchy.  This does not affect the accuracy of the transfer (i.e. which files\n\n              are hard-linked together), just its efficiency (i.e. copying the data for a new, early\n\n              copy of a hard-linked file that could have been found later in the transfer in another\n\n              member  of  the  hard-linked  set of files).  One way to avoid this inefficiency is to\n\n              disable incremental recursion using the --no-inc-recursive option.\n\n\n\n",
    "-p, --perms": "              This option causes the receiving rsync to set the destination permissions  to  be  the\n\n              same as the source permissions.  (See also the --chmod option for a way to modify what\n\n              rsync considers to be the source permissions.)\n\n\n\n              When this option is off, permissions are set as follows:\n\n\n\n              o      Existing files (including updated files)  retain  their  existing  permissions,\n\n                     though  the --executability option might change just the execute permission for\n\n                     the file.\n\n\n\n              o      New files get their \"normal\" permission bits set to the source  file\u2019s  permis\u2010\n\n                     sions masked with the receiving directory\u2019s default permissions (either the re\u2010\n\n                     ceiving process\u2019s umask, or the permissions specified via the  destination  di\u2010\n\n                     rectory\u2019s  default  ACL),  and their special permission bits disabled except in\n\n                     the case where a new directory inherits a setgid bit from its parent directory.\n\n\n\n              Thus, when --perms and --executability are both disabled, rsync\u2019s behavior is the same\n\n              as that of other file-copy utilities, such as cp(1) and tar(1).\n\n\n\n              In  summary:  to give destination files (both old and new) the source permissions, use\n\n              --perms.  To give new files the destination-default permissions (while leaving  exist\u2010\n\n              ing files unchanged), make sure that the --perms option is off and use --chmod=ugo=rwX\n\n              (which ensures that all non-masked bits get enabled).  If you\u2019d care to make this lat\u2010\n\n              ter  behavior  easier  to  type, you could define a popt alias for it, such as putting\n\n              this line in the file ~/.popt (the following  defines  the  -Z  option,  and  includes\n\n              --no-g to use the default group of the destination dir):\n\n\n\n                 rsync alias -Z --no-p --no-g --chmod=ugo=rwX\n\n\n\n              You could then use this new option in a command such as this one:\n\n\n\n                 rsync -avZ src/ dest/\n\n\n\n              (Caveat:  make  sure that -a does not follow -Z, or it will re-enable the two \"--no-*\"\n\n              options mentioned above.)\n\n\n\n              The preservation of the destination\u2019s setgid bit  on  newly-created  directories  when\n\n              --perms  is  off was added in rsync 2.6.7.  Older rsync versions erroneously preserved\n\n              the three special permission bits for newly-created files when --perms was off,  while\n\n              overriding the destination\u2019s setgid bit setting on a newly-created directory.  Default\n\n              ACL observance was added to the ACL patch for rsync 2.6.7, so  older  (or  non-ACL-en\u2010\n\n              abled)  rsyncs  use the umask even if default ACLs are present.  (Keep in mind that it\n\n              is the version of the receiving rsync that affects these behaviors.)\n\n\n\n",
    "-E, --executability": "              This option causes rsync to preserve the executability (or non-executability) of regu\u2010\n\n              lar  files when --perms is not enabled.  A regular file is considered to be executable\n\n              if at least one \u2019x\u2019 is turned on in its permissions.   When  an  existing  destination\n\n              file\u2019s  executability  differs from that of the corresponding source file, rsync modi\u2010\n\n              fies the destination file\u2019s permissions as follows:\n\n\n\n              o      To make a file non-executable, rsync turns off all its \u2019x\u2019 permissions.\n\n\n\n              o      To make a file executable, rsync turns on each \u2019x\u2019 permission that has a corre\u2010\n\n                     sponding \u2019r\u2019 permission enabled.\n\n\n\n              If --perms is enabled, this option is ignored.\n\n\n\n",
    "-A, --acls": "              This  option  causes rsync to update the destination ACLs to be the same as the source\n\n              ACLs.  The option also implies --perms.\n\n\n\n              The source and destination systems must have compatible ACL entries for this option to\n\n              work  properly.  See the --fake-super option for a way to backup and restore ACLs that\n\n              are not compatible.\n\n\n\n",
    "-X, --xattrs": "              This option causes rsync to update the destination extended attributes to be the  same\n\n              as the source ones.\n\n\n\n              For  systems  that  support  extended-attribute namespaces, a copy being done by a su\u2010\n\n              per-user copies all namespaces except system.*.  A normal user only copies the  user.*\n\n              namespace.  To be able to backup and restore non-user namespaces as a normal user, see\n\n              the --fake-super option.\n\n\n\n              The above name filtering can be overridden by using one or more  filter  options  with\n\n              the  x  modifier. When you specify an xattr-affecting filter rule, rsync requires that\n\n              you do your own system/user filtering, as well as any additional  filtering  for  what\n\n              xattr names are copied and what names are allowed to be deleted.  For example, to skip\n\n              the system namespace, you could specify:\n\n\n\n              --filter=\u2019-x system.*\u2019\n\n\n\n              To skip all namespaces except the user namespace, you  could  specify  a  negated-user\n\n              match:\n\n\n\n              --filter=\u2019-x! user.*\u2019\n\n\n\n              To  prevent  any attributes from being deleted, you could specify a receiver-only rule\n\n              that excludes all names:\n\n\n\n              --filter=\u2019-xr *\u2019\n\n\n\n              Note that the -X option does not copy rsync\u2019s special xattr values (e.g.   those  used\n\n              by --fake-super) unless you repeat the option (e.g. -XX).  This \"copy all xattrs\" mode\n\n              cannot be used with --fake-super.\n\n\n\n",
    "--chmod": "              This option tells rsync to apply one or more comma-separated \"chmod\" modes to the per\u2010\n\n              mission  of  the  files  in the transfer.  The resulting value is treated as though it\n\n              were the permissions that the sending side supplied for the  file,  which  means  that\n\n              this option can seem to have no effect on existing files if --perms is not enabled.\n\n\n\n              In  addition  to  the  normal parsing rules specified in the chmod(1) manpage, you can\n\n              specify an item that should only apply to a directory by prefixing it with a  \u2019D\u2019,  or\n\n              specify  an item that should only apply to a file by prefixing it with a \u2019F\u2019.  For ex\u2010\n\n              ample, the following will ensure that all directories  get  marked  set-gid,  that  no\n\n              files  are  other-writable,  that  both are user-writable and group-writable, and that\n\n              both have consistent executability across all bits:\n\n\n\n              --chmod=Dg+s,ug+w,Fo-w,+X\n\n\n\n              Using octal mode numbers is also allowed:\n\n\n\n              --chmod=D2775,F664\n\n\n\n              It is also legal to specify multiple --chmod options, as  each  additional  option  is\n\n              just appended to the list of changes to make.\n\n\n\n              See the --perms and --executability options for how the resulting permission value can\n\n              be applied to the files in the transfer.\n\n\n\n",
    "-o, --owner": "              This option causes rsync to set the owner of the destination file to be  the  same  as\n\n              the  source  file, but only if the receiving rsync is being run as the super-user (see\n\n              also the --super and --fake-super options).  Without this option,  the  owner  of  new\n\n              and/or transferred files are set to the invoking user on the receiving side.\n\n\n\n              The  preservation  of ownership will associate matching names by default, but may fall\n\n              back to using the ID number in some circumstances (see also the  --numeric-ids  option\n\n              for a full discussion).\n\n\n\n",
    "-g, --group": "              This  option  causes  rsync to set the group of the destination file to be the same as\n\n              the source file.  If the receiving program is not running as  the  super-user  (or  if\n\n              --no-super was specified), only groups that the invoking user on the receiving side is\n\n              a member of will be preserved.  Without this option, the group is set to  the  default\n\n              group of the invoking user on the receiving side.\n\n\n\n              The  preservation  of  group information will associate matching names by default, but\n\n              may fall back to using the ID number in some circumstances (see also the --numeric-ids\n\n              option for a full discussion).\n\n\n\n",
    "--devices": "              This  option  causes  rsync to transfer character and block device files to the remote\n\n              system to recreate these devices.  This option has no effect if the receiving rsync is\n\n              not run as the super-user (see also the --super and --fake-super options).\n\n\n\n",
    "--specials": "              This option causes rsync to transfer special files such as named sockets and fifos.\n\n\n\n",
    "-D     The -D option is equivalent to --devices --specials.": "\n\n",
    "-t, --times": "              This  tells  rsync to transfer modification times along with the files and update them\n\n              on the remote system.  Note that if this option is not used, the optimization that ex\u2010\n\n              cludes  files that have not been modified cannot be effective; in other words, a miss\u2010\n\n              ing -t or -a will cause the next transfer to behave as if  it  used  -I,  causing  all\n\n              files  to  be  updated  (though  rsync\u2019s delta-transfer algorithm will make the update\n\n              fairly efficient if the files haven\u2019t actually changed, you\u2019re much better  off  using\n\n              -t).\n\n\n\n",
    "-O, --omit-dir-times": "              This  tells  rsync  to  omit directories when it is preserving modification times (see\n\n              --times).  If NFS is sharing the directories on the receiving side, it is a good  idea\n\n              to use -O.  This option is inferred if you use --backup without --backup-dir.\n\n\n\n              This  option also has the side-effect of avoiding early creation of directories in in\u2010\n\n              cremental recursion copies.  The default  --inc-recursive  copying  normally  does  an\n\n              early-create  pass of all the sub-directories in a parent directory in order for it to\n\n              be able to then set the modify time of the parent directory right away (without having\n\n              to delay that until a bunch of recursive copying has finished).  This early-create id\u2010\n\n              iom is not necessary if directory modify times are  not  being  preserved,  so  it  is\n\n              skipped.   Since  early-create  directories don\u2019t have accurate mode, mtime, or owner\u2010\n\n              ship, the use of this option can help when someone wants to avoid these partially-fin\u2010\n\n              ished directories.\n\n\n\n",
    "-J, --omit-link-times": "              This  tells  rsync  to  omit  symlinks  when  it is preserving modification times (see\n\n              --times).\n\n\n\n",
    "--super": "              This tells the receiving side to attempt super-user activities even if  the  receiving\n\n              rsync  wasn\u2019t  run  by the super-user.  These activities include: preserving users via\n\n              the --owner option, preserving all groups (not just the current user\u2019s groups) via the\n\n              --groups  option,  and  copying  devices via the --devices option.  This is useful for\n\n              systems that allow such activities without being the super-user, and also for ensuring\n\n              that  you will get errors if the receiving side isn\u2019t being run as the super-user.  To\n\n              turn off super-user activities, the super-user can use --no-super.\n\n\n\n",
    "--fake-super": "              When this option is enabled, rsync simulates super-user activities by saving/restoring\n\n              the  privileged  attributes  via special extended attributes that are attached to each\n\n              file (as needed).  This includes the file\u2019s owner and group (if  it  is  not  the  de\u2010\n\n              fault),  the  file\u2019s  device  info  (device  & special files are created as empty text\n\n              files), and any permission bits that we won\u2019t allow to be set on the real  file  (e.g.\n\n              the  real  file  gets  u-s,g-s,o-t  for safety) or that would limit the owner\u2019s access\n\n              (since the real super-user can always access/change a file, the files  we  create  can\n\n              always  be  accessed/changed by the creating user).  This option also handles ACLs (if\n\n              --acls was specified) and non-user extended attributes (if --xattrs was specified).\n\n\n\n              This is a good way to backup data without using a super-user, and to store  ACLs  from\n\n              incompatible systems.\n\n\n\n              The --fake-super option only affects the side where the option is used.  To affect the\n\n              remote side of a remote-shell connection, use the --remote-option (-M) option:\n\n\n\n                rsync -av -M--fake-super /src/ host:/dest/\n\n\n\n              For a local copy, this option affects both the source and  the  destination.   If  you\n\n              wish  a  local  copy  to  enable  this  option just for the destination files, specify\n\n              -M--fake-super.  If you wish a local copy to enable this option just  for  the  source\n\n              files, combine --fake-super with -M--super.\n\n\n\n              This option is overridden by both --super and --no-super.\n\n\n\n              See also the \"fake super\" setting in the daemon\u2019s rsyncd.conf file.\n\n\n\n",
    "-S, --sparse": "              Try  to handle sparse files efficiently so they take up less space on the destination.\n\n              If combined with --inplace the file created might not end up with sparse  blocks  with\n\n              some combinations of kernel version and/or filesystem type.  If --whole-file is in ef\u2010\n\n              fect (e.g. for a local copy) then it will always work because rsync truncates the file\n\n              prior to writing out the updated version.\n\n\n\n              Note  that  versions of rsync older than 3.1.3 will reject the combination of --sparse\n\n              and --inplace.\n\n\n\n",
    "--preallocate": "              This tells the receiver to allocate each destination file to its eventual size  before\n\n              writing data to the file.  Rsync will only use the real filesystem-level preallocation\n\n              support provided by Linux\u2019s fallocate(2) system call or  Cygwin\u2019s  posix_fallocate(3),\n\n              not the slow glibc implementation that writes a null byte into each block.\n\n\n\n              Without  this  option,  larger files may not be entirely contiguous on the filesystem,\n\n              but with this option rsync will probably copy more slowly.  If the destination is  not\n\n              an  extent-supporting filesystem (such as ext4, xfs, NTFS, etc.), this option may have\n\n              no positive effect at all.\n\n\n\n              If combined with --sparse, the file will only have sparse blocks (as opposed to  allo\u2010\n\n              cated  sequences of null bytes) if the kernel version and filesystem type support cre\u2010\n\n              ating holes in the allocated data.\n\n\n\n",
    "-n, --dry-run": "              This makes rsync perform a trial run that  doesn\u2019t  make  any  changes  (and  produces\n\n              mostly  the  same output as a real run).  It is most commonly used in combination with\n\n              the -v, --verbose and/or -i, --itemize-changes options to see what an rsync command is\n\n              going to do before one actually runs it.\n\n\n\n              The  output of --itemize-changes is supposed to be exactly the same on a dry run and a\n\n              subsequent real run (barring intentional trickery and system  call  failures);  if  it\n\n              isn\u2019t,  that\u2019s a bug.  Other output should be mostly unchanged, but may differ in some\n\n              areas.  Notably, a dry run does not send  the  actual  data  for  file  transfers,  so\n\n              --progress  has  no  effect,  the  \"bytes sent\", \"bytes received\", \"literal data\", and\n\n              \"matched data\" statistics are too small, and the \"speedup\" value is  equivalent  to  a\n\n              run where no file transfers were needed.\n\n\n\n",
    "-W, --whole-file": "              This  option  disables  rsync\u2019s delta-transfer algorithm, which causes all transferred\n\n              files to be sent whole.  The transfer may be faster if this option is  used  when  the\n\n              bandwidth  between the source and destination machines is higher than the bandwidth to\n\n              disk (especially when the \"disk\" is actually a networked filesystem).  This is the de\u2010\n\n              fault  when  both the source and destination are specified as local paths, but only if\n\n              no batch-writing option is in effect.\n\n\n\n",
    "--checksum-choice=STR": "              This option overrides the checksum algoriths.  If one algorithm name is specified,  it\n\n              is  used  for  both  the  transfer checksums and (assuming --checksum is specifed) the\n\n              pre-transfer checksumming. If two comma-separated names are supplied, the  first  name\n\n              affects the transfer checksums, and the second name affects the pre-transfer checksum\u2010\n\n              ming.\n\n\n\n              The algorithm choices are \"auto\", \"md4\", \"md5\", and \"none\".  If  \"none\"  is  specified\n\n              for  the first name, the --whole-file option is forced on and no checksum verification\n\n              is performed on the transferred data.  If \"none\" is specified for the second name, the\n\n              --checksum  option cannot be used. The \"auto\" option is the default, where rsync bases\n\n              its algorithm choice on the protocol version (for backward  compatibility  with  older\n\n              rsync versions).\n\n\n\n",
    "-x, --one-file-system": "              This  tells  rsync  to avoid crossing a filesystem boundary when recursing.  This does\n\n              not limit the user\u2019s ability to specify items to copy from multiple filesystems,  just\n\n              rsync\u2019s recursion through the hierarchy of each directory that the user specified, and\n\n              also the analogous recursion on the receiving side during deletion.  Also keep in mind\n\n              that rsync treats a \"bind\" mount to the same device as being on the same filesystem.\n\n\n\n              If  this  option  is  repeated, rsync omits all mount-point directories from the copy.\n\n              Otherwise, it includes an empty directory at each mount-point it encounters (using the\n\n              attributes of the mounted directory because those of the underlying mount-point direc\u2010\n\n              tory are inaccessible).\n\n\n\n              If rsync has been told to collapse symlinks (via --copy-links or --copy-unsafe-links),\n\n              a symlink to a directory on another device is treated like a mount-point.  Symlinks to\n\n              non-directories are unaffected by this option.\n\n\n\n",
    "--existing, --ignore-non-existing": "              This tells rsync to skip creating files (including directories) that do not exist  yet\n\n              on  the destination.  If this option is combined with the --ignore-existing option, no\n\n              files will be updated (which can be useful if all you want to do is delete  extraneous\n\n              files).\n\n\n\n              This  option  is  a  transfer rule, not an exclude, so it doesn\u2019t affect the data that\n\n              goes into the file-lists, and thus it doesn\u2019t affect deletions.  It  just  limits  the\n\n              files that the receiver requests to be transferred.\n\n\n\n",
    "--ignore-existing": "              This  tells  rsync  to skip updating files that already exist on the destination (this\n\n              does not ignore existing directories, or nothing would get done).  See  also  --exist\u2010\n\n              ing.\n\n\n\n              This  option  is  a  transfer rule, not an exclude, so it doesn\u2019t affect the data that\n\n              goes into the file-lists, and thus it doesn\u2019t affect deletions.  It  just  limits  the\n\n              files that the receiver requests to be transferred.\n\n\n\n              This  option  can  be useful for those doing backups using the --link-dest option when\n\n              they need to continue a backup run that got interrupted.  Since a --link-dest  run  is\n\n              copied  into  a new directory hierarchy (when it is used properly), using --ignore ex\u2010\n\n              isting will ensure that the already-handled files don\u2019t get tweaked  (which  avoids  a\n\n              change  in  permissions on the hard-linked files).  This does mean that this option is\n\n              only looking at the existing files in the destination hierarchy itself.\n\n\n\n",
    "--remove-source-files": "              This tells rsync to remove from the sending side the files  (meaning  non-directories)\n\n              that are a part of the transfer and have been successfully duplicated on the receiving\n\n              side.\n\n\n\n              Note that you should only use this option on source files that are quiescent.  If  you\n\n              are  using  this  to move files that show up in a particular directory over to another\n\n              host, make sure that the finished files get renamed into the source directory, not di\u2010\n\n              rectly  written  into it, so that rsync can\u2019t possibly transfer a file that is not yet\n\n              fully written.  If you can\u2019t first write the files into  a  different  directory,  you\n\n              should  use  a  naming idiom that lets rsync avoid transferring files that are not yet\n\n              finished (e.g. name the file \"foo.new\" when it is written, rename it to \"foo\" when  it\n\n              is done, and then use the option --exclude='*.new' for the rsync transfer).\n\n\n\n              Starting  with 3.1.0, rsync will skip the sender-side removal (and output an error) if\n\n              the file\u2019s size or modify time has not stayed unchanged.\n\n\n\n",
    "--delete": "              This tells rsync to delete extraneous files from the receiving side (ones that  aren\u2019t\n\n              on  the  sending side), but only for the directories that are being synchronized.  You\n\n              must have asked rsync to send the whole directory (e.g. \"dir\" or \"dir/\") without using\n\n              a  wildcard for the directory\u2019s contents (e.g. \"dir/*\") since the wildcard is expanded\n\n              by the shell and rsync thus gets a request  to  transfer  individual  files,  not  the\n\n              files\u2019  parent directory.  Files that are excluded from the transfer are also excluded\n\n              from being deleted unless you use the --delete-excluded option or mark  the  rules  as\n\n              only  matching  on  the  sending side (see the include/exclude modifiers in the FILTER\n\n              RULES section).\n\n\n\n              Prior to rsync 2.6.7, this option would have no effect unless --recursive was enabled.\n\n              Beginning  with 2.6.7, deletions will also occur when --dirs (-d) is enabled, but only\n\n              for directories whose contents are being copied.\n\n\n\n              This option can be dangerous if used incorrectly!  It is a very good idea to first try\n\n              a run using the --dry-run option (-n) to see what files are going to be deleted.\n\n\n\n              If the sending side detects any I/O errors, then the deletion of any files at the des\u2010\n\n              tination will be automatically disabled. This is to prevent temporary filesystem fail\u2010\n\n              ures (such as NFS errors) on the sending side from causing a massive deletion of files\n\n              on the destination.  You can override this with the --ignore-errors option.\n\n\n\n              The --delete option may be combined with one of the --delete-WHEN options without con\u2010\n\n              flict,  as  well  as --delete-excluded.  However, if none of the --delete-WHEN options\n\n              are specified, rsync will choose the --delete-during algorithm when talking  to  rsync\n\n              3.0.0 or newer, and the --delete-before algorithm when talking to an older rsync.  See\n\n              also --delete-delay and --delete-after.\n\n\n\n",
    "--delete-before": "              Request that the file-deletions on the receiving side  be  done  before  the  transfer\n\n              starts.  See --delete (which is implied) for more details on file-deletion.\n\n\n\n              Deleting  before  the transfer is helpful if the filesystem is tight for space and re\u2010\n\n              moving extraneous files would help to make the transfer possible.   However,  it  does\n\n              introduce  a  delay  before  the start of the transfer, and this delay might cause the\n\n              transfer to timeout (if --timeout was specified).  It also forces  rsync  to  use  the\n\n              old,  non-incremental recursion algorithm that requires rsync to scan all the files in\n\n              the transfer into memory at once (see --recursive).\n\n\n\n",
    "--delete-during, --del": "              Request that the file-deletions on the receiving side be  done  incrementally  as  the\n\n              transfer  happens.   The per-directory delete scan is done right before each directory\n\n              is checked for updates, so it behaves like a more efficient --delete-before, including\n\n              doing  the  deletions prior to any per-directory filter files being updated.  This op\u2010\n\n              tion was first added in rsync version 2.6.4.  See --delete (which is implied) for more\n\n              details on file-deletion.\n\n\n\n",
    "--delete-delay": "              Request  that the file-deletions on the receiving side be computed during the transfer\n\n              (like --delete-during), and then removed after the transfer completes.  This is useful\n\n              when  combined  with  --delay-updates and/or --fuzzy, and is more efficient than using\n\n              --delete-after (but can behave differently, since --delete-after  computes  the  dele\u2010\n\n              tions  in a separate pass after all updates are done).  If the number of removed files\n\n              overflows an internal buffer, a temporary file will be created on the  receiving  side\n\n              to hold the names (it is removed while open, so you shouldn\u2019t see it during the trans\u2010\n\n              fer).  If the creation of the temporary file fails, rsync will try to fall back to us\u2010\n\n              ing  --delete-after  (which it cannot do if --recursive is doing an incremental scan).\n\n              See --delete (which is implied) for more details on file-deletion.\n\n\n\n",
    "--delete-after": "              Request that the file-deletions on the receiving side be done after the  transfer  has\n\n              completed.   This is useful if you are sending new per-directory merge files as a part\n\n              of the transfer and you want their exclusions to take effect for the delete  phase  of\n\n              the  current transfer.  It also forces rsync to use the old, non-incremental recursion\n\n              algorithm that requires rsync to scan all the files in the  transfer  into  memory  at\n\n              once  (see  --recursive).   See  --delete  (which  is  implied)  for  more  details on\n\n              file-deletion.\n\n\n\n",
    "--delete-excluded": "              In addition to deleting the files on the receiving side that are not  on  the  sending\n\n              side,  this  tells  rsync  to also delete any files on the receiving side that are ex\u2010\n\n              cluded (see --exclude).  See the FILTER RULES section for a way to make individual ex\u2010\n\n              clusions  behave  this  way  on  the  receiver,  and  for  a way to protect files from\n\n              --delete-excluded.  See --delete (which is implied) for more details on file-deletion.\n\n\n\n",
    "--ignore-missing-args": "              When rsync is first processing  the  explicitly  requested  source  files  (e.g.  com\u2010\n\n              mand-line arguments or --files-from entries), it is normally an error if the file can\u2010\n\n              not be found.  This option suppresses that error, and does not  try  to  transfer  the\n\n              file.   This  does  not affect subsequent vanished-file errors if a file was initially\n\n              found to be present and later is no longer there.\n\n\n\n",
    "--delete-missing-args": "              This option takes the behavior of (the implied) --ignore-missing-args  option  a  step\n\n              farther:   each missing arg will become a deletion request of the corresponding desti\u2010\n\n              nation file on the receiving side (should it exist).  If the  destination  file  is  a\n\n              non-empty  directory,  it will only be successfully deleted if --force or --delete are\n\n              in effect.  Other than that, this option is independent of any other  type  of  delete\n\n              processing.\n\n\n\n              The missing source files are represented by special file-list entries which display as\n\n              a \"*missing\" entry in the --list-only output.\n\n\n\n",
    "--ignore-errors": "              Tells --delete to go ahead and delete files even when there are I/O errors.\n\n\n\n",
    "--force": "              This option tells rsync to delete a non-empty directory when it is to be replaced by a\n\n              non-directory.   This  is  only relevant if deletions are not active (see --delete for\n\n              details).\n\n\n\n              Note for  older  rsync  versions:  --force  used  to  still  be  required  when  using\n\n              --delete-after,  and  it  used  to be non-functional unless the --recursive option was\n\n              also enabled.\n\n\n\n",
    "--max-delete=NUM": "              This tells rsync not to delete more than NUM files or directories.  If that  limit  is\n\n              exceeded,  all  further deletions are skipped through the end of the transfer.  At the\n\n              end, rsync outputs a warning (including a count of the skipped  deletions)  and  exits\n\n              with an error code of 25 (unless some more important error condition also occurred).\n\n\n\n              Beginning  with  version  3.0.0, you may specify --max-delete=0 to be warned about any\n\n              extraneous files in the destination without removing any of them.  Older  clients  in\u2010\n\n              terpreted  this  as  \"unlimited\", so if you don\u2019t know what version the client is, you\n\n              can use the less obvious --max-delete=-1 as a backward-compatible way to specify  that\n\n              no deletions be allowed (though really old versions didn\u2019t warn when the limit was ex\u2010\n\n              ceeded).\n\n\n\n",
    "--max-size=SIZE": "              This tells rsync to avoid transferring any file that  is  larger  than  the  specified\n\n              SIZE.  The SIZE value can be suffixed with a string to indicate a size multiplier, and\n\n              may be a fractional value (e.g. \"--max-size=1.5m\").\n\n\n\n              This option is a transfer rule, not an exclude, so it doesn\u2019t  affect  the  data  that\n\n              goes  into  the  file-lists, and thus it doesn\u2019t affect deletions.  It just limits the\n\n              files that the receiver requests to be transferred.\n\n\n\n              The suffixes are as follows: \"K\" (or \"KiB\") is a kibibyte (1024), \"M\" (or \"MiB\") is  a\n\n              mebibyte  (1024*1024), and \"G\" (or \"GiB\") is a gibibyte (1024*1024*1024).  If you want\n\n              the multiplier to be 1000 instead of 1024, use \"KB\", \"MB\", or \"GB\".  (Note: lower-case\n\n              is also accepted for all values.)  Finally, if the suffix ends in either \"+1\" or \"-1\",\n\n              the value will be offset by one byte in the indicated direction.\n\n\n\n              Examples: --max-size=1.5mb-1 is  1499999  bytes,  and  --max-size=2g+1  is  2147483649\n\n              bytes.\n\n\n\n              Note that rsync versions prior to 3.1.0 did not allow --max-size=0.\n\n\n\n",
    "--min-size=SIZE": "              This  tells  rsync  to  avoid transferring any file that is smaller than the specified\n\n              SIZE, which can help in not transferring small, junk files.  See the --max-size option\n\n              for a description of SIZE and other information.\n\n\n\n              Note that rsync versions prior to 3.1.0 did not allow --min-size=0.\n\n\n\n",
    "-B, --block-size=BLOCKSIZE": "              This  forces the block size used in rsync\u2019s delta-transfer algorithm to a fixed value.\n\n              It is normally selected based on the size of each file being updated.  See the techni\u2010\n\n              cal report for details.\n\n\n\n",
    "-e, --rsh=COMMAND": "              This option allows you to choose an alternative remote shell program to use for commu\u2010\n\n              nication between the local and remote copies of rsync. Typically, rsync is  configured\n\n              to use ssh by default, but you may prefer to use rsh on a local network.\n\n\n\n              If  this  option  is used with [user@]host::module/path, then the remote shell COMMAND\n\n              will be used to run an rsync daemon on the remote host, and all data will be transmit\u2010\n\n              ted  through that remote shell connection, rather than through a direct socket connec\u2010\n\n              tion to a running rsync daemon on the remote host.  See the section \"USING  RSYNC-DAE\u2010\n\n              MON FEATURES VIA A REMOTE-SHELL CONNECTION\" above.\n\n\n\n              Command-line  arguments are permitted in COMMAND provided that COMMAND is presented to\n\n              rsync as a single argument.  You must use spaces (not tabs  or  other  whitespace)  to\n\n              separate  the  command  and  args from each other, and you can use single- and/or dou\u2010\n\n              ble-quotes to preserve spaces in an argument (but not backslashes).   Note  that  dou\u2010\n\n              bling  a single-quote inside a single-quoted string gives you a single-quote; likewise\n\n              for double-quotes (though you need to pay attention to  which  quotes  your  shell  is\n\n              parsing and which quotes rsync is parsing).  Some examples:\n\n\n\n                  -e 'ssh -p 2234'\n\n                  -e 'ssh -o \"ProxyCommand nohup ssh firewall nc -w1 %h %p\"'\n\n\n\n              (Note  that ssh users can alternately customize site-specific connect options in their\n\n              .ssh/config file.)\n\n\n\n              You can also choose the remote shell program using the RSYNC_RSH environment variable,\n\n              which accepts the same range of values as -e.\n\n\n\n              See also the --blocking-io option which is affected by this option.\n\n\n\n",
    "--rsync-path=PROGRAM": "              Use this to specify what program is to be run on the remote machine to start-up rsync.\n\n              Often  used  when  rsync  is  not   in   the   default   remote-shell\u2019s   path   (e.g.\n\n              --rsync-path=/usr/local/bin/rsync).   Note  that  PROGRAM  is  run  with the help of a\n\n              shell, so it can be any program, script, or command sequence you\u2019d  care  to  run,  so\n\n              long as it does not corrupt the standard-in & standard-out that rsync is using to com\u2010\n\n              municate.\n\n\n\n              One tricky example is to set a different default directory on the remote  machine  for\n\n              use with the --relative option.  For instance:\n\n\n\n                  rsync -avR --rsync-path=\"cd /a/b && rsync\" host:c/d /e/\n\n\n\n",
    "-M, --remote-option=OPTION": "              This  option is used for more advanced situations where you want certain effects to be\n\n              limited to one side of  the  transfer  only.   For  instance,  if  you  want  to  pass\n\n              --log-file=FILE and --fake-super to the remote system, specify it like this:\n\n\n\n                  rsync -av -M --log-file=foo -M--fake-super src/ dest/\n\n\n\n              If  you  want  to have an option affect only the local side of a transfer when it nor\u2010\n\n              mally affects both sides, send its negation to the remote side.  Like this:\n\n\n\n                  rsync -av -x -M--no-x src/ dest/\n\n\n\n              Be cautious using this, as it is possible to toggle an option that will cause rsync to\n\n              have  a  different  idea about what data to expect next over the socket, and that will\n\n              make it fail in a cryptic fashion.\n\n\n\n              Note that it is best to use a separate --remote-option for each  option  you  want  to\n\n              pass.   This makes your useage compatible with the --protect-args option.  If that op\u2010\n\n              tion is off, any spaces in your remote options will be split by the remote  shell  un\u2010\n\n              less you take steps to protect them.\n\n\n\n              When performing a local transfer, the \"local\" side is the sender and the \"remote\" side\n\n              is the receiver.\n\n\n\n              Note some versions of the popt option-parsing library have a bug in them that prevents\n\n              you from using an adjacent arg with an equal in it next to a short option letter (e.g.\n\n              -M--log-file=/tmp/foo).  If this bug affects your version of popt,  you  can  use  the\n\n              version of popt that is included with rsync.\n\n\n\n",
    "-C, --cvs-exclude": "              This  is  a useful shorthand for excluding a broad range of files that you often don\u2019t\n\n              want to transfer between systems. It uses a similar algorithm to CVS to determine if a\n\n              file should be ignored.\n\n\n\n              The  exclude  list  is initialized to exclude the following items (these initial items\n\n              are marked as perishable -- see the FILTER RULES section):\n\n\n\n                     RCS SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state .nse_depinfo  *~  #*\n\n                     .#*  ,*  _$*  *$ *.old *.bak *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so\n\n                     *.exe *.Z *.elc *.ln core .svn/ .git/ .hg/ .bzr/\n\n\n\n              then, files listed in a $HOME/.cvsignore are added to the list and any files listed in\n\n              the CVSIGNORE environment variable (all cvsignore names are delimited by whitespace).\n\n\n\n              Finally,  any  file is ignored if it is in the same directory as a .cvsignore file and\n\n              matches one of the patterns listed  therein.   Unlike  rsync\u2019s  filter/exclude  files,\n\n              these patterns are split on whitespace.  See the cvs(1) manual for more information.\n\n\n\n              If  you\u2019re  combining  -C with your own --filter rules, you should note that these CVS\n\n              excludes are appended at the end of your own rules, regardless of  where  the  -C  was\n\n              placed on the command-line.  This makes them a lower priority than any rules you spec\u2010\n\n              ified explicitly.  If you want to control where these CVS excludes get  inserted  into\n\n              your  filter rules, you should omit the -C as a command-line option and use a combina\u2010\n\n              tion of --filter=:C and --filter=-C (either on your command-line  or  by  putting  the\n\n              \":C\" and \"-C\" rules into a filter file with your other rules).  The first option turns\n\n              on the per-directory scanning for the .cvsignore  file.   The  second  option  does  a\n\n              one-time import of the CVS excludes mentioned above.\n\n\n\n",
    "-f, --filter=RULE": "              This option allows you to add rules to selectively exclude certain files from the list\n\n              of files to be transferred. This is most useful in combination with a recursive trans\u2010\n\n              fer.\n\n\n\n              You  may  use as many --filter options on the command line as you like to build up the\n\n              list of files to exclude.  If the filter contains whitespace, be sure to quote  it  so\n\n              that the shell gives the rule to rsync as a single argument.  The text below also men\u2010\n\n              tions that you can use an underscore to replace the space that separates a  rule  from\n\n              its arg.\n\n\n\n              See the FILTER RULES section for detailed information on this option.\n\n\n\n",
    "-F     The -F option is a shorthand for adding two --filter rules to your command.  The first": "              time it is used is a shorthand for this rule:\n\n\n\n                 --filter='dir-merge /.rsync-filter'\n\n\n\n              This tells rsync to look for per-directory .rsync-filter files that have  been  sprin\u2010\n\n              kled  through  the  hierarchy and use their rules to filter the files in the transfer.\n\n              If -F is repeated, it is a shorthand for this rule:\n\n\n\n                 --filter='exclude .rsync-filter'\n\n\n\n              This filters out the .rsync-filter files themselves from the transfer.\n\n\n\n              See the FILTER RULES section for detailed information on how these options work.\n\n\n\n",
    "--exclude=PATTERN": "              This option is a simplified form of the --filter option that defaults  to  an  exclude\n\n              rule and does not allow the full rule-parsing syntax of normal filter rules.\n\n\n\n              See the FILTER RULES section for detailed information on this option.\n\n\n\n",
    "--exclude-from=FILE": "              This  option is related to the --exclude option, but it specifies a FILE that contains\n\n              exclude patterns (one per line).  Blank lines in the file and lines starting with  \u2019;\u2019\n\n              or \u2019#\u2019 are ignored.  If FILE is -, the list will be read from standard input.\n\n\n\n",
    "--include=PATTERN": "              This  option  is  a simplified form of the --filter option that defaults to an include\n\n              rule and does not allow the full rule-parsing syntax of normal filter rules.\n\n\n\n              See the FILTER RULES section for detailed information on this option.\n\n\n\n",
    "--include-from=FILE": "              This option is related to the --include option, but it specifies a FILE that  contains\n\n              include  patterns (one per line).  Blank lines in the file and lines starting with \u2019;\u2019\n\n              or \u2019#\u2019 are ignored.  If FILE is -, the list will be read from standard input.\n\n\n\n",
    "--files-from=FILE": "              Using this option allows you to specify the exact list of files to transfer  (as  read\n\n              from the specified FILE or - for standard input).  It also tweaks the default behavior\n\n              of rsync to make transferring just the specified files and directories easier:\n\n\n\n              o      The --relative (-R) option is implied, which  preserves  the  path  information\n\n                     that is specified for each item in the file (use --no-relative or --no-R if you\n\n                     want to turn that off).\n\n\n\n              o      The --dirs (-d) option is implied, which will create directories  specified  in\n\n                     the list on the destination rather than noisily skipping them (use --no-dirs or\n\n                     --no-d if you want to turn that off).\n\n\n\n              o      The --archive (-a) option\u2019s behavior does not imply --recursive (-r), so  spec\u2010\n\n                     ify it explicitly, if you want it.\n\n\n\n              o      These  side-effects  change  the default state of rsync, so the position of the\n\n                     --files-from option on the command-line has no bearing on how other options are\n\n                     parsed (e.g. -a works the same before or after --files-from, as does --no-R and\n\n                     all other options).\n\n\n\n              The filenames that are read from the FILE are all relative to the source  dir  --  any\n\n              leading  slashes  are removed and no \"..\" references are allowed to go higher than the\n\n              source dir.  For example, take this command:\n\n\n\n                 rsync -a --files-from=/tmp/foo /usr remote:/backup\n\n\n\n              If /tmp/foo contains the string \"bin\" (or even \"/bin\"), the /usr/bin directory will be\n\n              created  as  /backup/bin on the remote host.  If it contains \"bin/\" (note the trailing\n\n              slash), the immediate contents of the directory would also be sent (without needing to\n\n              be  explicitly  mentioned in the file -- this began in version 2.6.4).  In both cases,\n\n              if the -r option was enabled, that dir\u2019s entire hierarchy would  also  be  transferred\n\n              (keep  in mind that -r needs to be specified explicitly with --files-from, since it is\n\n              not implied by -a).  Also note that the effect of the (enabled by default)  --relative\n\n              option  is  to  duplicate only the path info that is read from the file -- it does not\n\n              force the duplication of the source-spec path (/usr in this case).\n\n\n\n              In addition, the --files-from file can be read from the remote host instead of the lo\u2010\n\n              cal host if you specify a \"host:\" in front of the file (the host must match one end of\n\n              the transfer).  As a short-cut, you can specify just a prefix of \":\" to mean \"use  the\n\n              remote end of the transfer\".  For example:\n\n\n\n                 rsync -a --files-from=:/path/file-list src:/ /tmp/copy\n\n\n\n              This  would  copy all the files specified in the /path/file-list file that was located\n\n              on the remote \"src\" host.\n\n\n\n              If the --iconv and --protect-args options are specified and the --files-from filenames\n\n              are  being  sent  from  one host to another, the filenames will be translated from the\n\n              sending host\u2019s charset to the receiving host\u2019s charset.\n\n\n\n              NOTE: sorting the list of files in the --files-from input helps rsync to be more effi\u2010\n\n              cient, as it will avoid re-visiting the path elements that are shared between adjacent\n\n              entries.  If the input is not sorted, some path elements (implied directories) may end\n\n              up being scanned multiple times, and rsync will eventually unduplicate them after they\n\n              get turned into file-list elements.\n\n\n\n",
    "-0, --from0": "              This tells rsync that the rules/filenames it reads from a file  are  terminated  by  a\n\n              null  (\u2019\\0\u2019)  character,  not  a NL, CR, or CR+LF.  This affects --exclude-from, --in\u2010\n\n              clude-from, --files-from, and any merged files specified in a --filter rule.  It  does\n\n              not  affect  --cvs-exclude  (since  all names read from a .cvsignore file are split on\n\n              whitespace).\n\n\n\n",
    "-s, --protect-args": "              This option sends all filenames and most options to the remote rsync without  allowing\n\n              the  remote  shell  to interpret them.  This means that spaces are not split in names,\n\n              and any non-wildcard special characters are not translated (such as ~, $, ;, &, etc.).\n\n              Wildcards are expanded on the remote host by rsync (instead of the shell doing it).\n\n\n\n              If  you use this option with --iconv, the args related to the remote side will also be\n\n              translated from the local to the remote character-set.  The translation happens before\n\n              wild-cards are expanded.  See also the --files-from option.\n\n\n\n              You  may also control this option via the RSYNC_PROTECT_ARGS environment variable.  If\n\n              this variable has a non-zero value, this option will be enabled by default,  otherwise\n\n              it  will  be  disabled by default.  Either state is overridden by a manually specified\n\n              positive or negative version of this option (note that  --no-s  and  --no-protect-args\n\n              are  the  negative versions).  Since this option was first introduced in 3.0.0, you\u2019ll\n\n              need to make sure it\u2019s disabled if you ever need to interact with a remote rsync  that\n\n              is older than that.\n\n\n\n              Rsync  can  also  be configured (at build time) to have this option enabled by default\n\n              (with is overridden by both the environment and the command-line).  This  option  will\n\n              eventually  become  a new default setting at some as-yet-undetermined point in the fu\u2010\n\n              ture.\n\n\n\n",
    "-T, --temp-dir=DIR": "              This option instructs rsync to use DIR as a scratch directory when creating  temporary\n\n              copies  of  the  files  transferred on the receiving side.  The default behavior is to\n\n              create each temporary file in the same directory as the associated  destination  file.\n\n              Beginning  with  rsync 3.1.1, the temp-file names inside the specified DIR will not be\n\n              prefixed with an extra dot (though they will still have a random suffix added).\n\n\n\n              This option is most often used when the receiving disk partition does not have  enough\n\n              free  space  to  hold  a copy of the largest file in the transfer.  In this case (i.e.\n\n              when the scratch directory is on a different disk partition), rsync will not  be  able\n\n              to  rename  each  received  temporary  file over the top of the associated destination\n\n              file, but instead must copy it into place.  Rsync does this by copying the  file  over\n\n              the  top  of  the destination file, which means that the destination file will contain\n\n              truncated data during this copy.  If this were not done this way (even if the destina\u2010\n\n              tion  file were first removed, the data locally copied to a temporary file in the des\u2010\n\n              tination directory, and then renamed into place) it would be possible for the old file\n\n              to continue taking up disk space (if someone had it open), and thus there might not be\n\n              enough room to fit the new version on the disk at the same time.\n\n\n\n              If you are using this option for reasons other than a shortage of disk space, you  may\n\n              wish  to combine it with the --delay-updates option, which will ensure that all copied\n\n              files get put into subdirectories in the destination hierarchy, awaiting  the  end  of\n\n              the  transfer.   If  you don\u2019t have enough room to duplicate all the arriving files on\n\n              the destination partition, another way to tell rsync that you aren\u2019t overly  concerned\n\n              about disk space is to use the --partial-dir option with a relative path; because this\n\n              tells rsync that it is OK to stash off a copy of a single file in a subdir in the des\u2010\n\n              tination hierarchy, rsync will use the partial-dir as a staging area to bring over the\n\n              copied file, and then rename it into place from  there.  (Specifying  a  --partial-dir\n\n              with an absolute path does not have this side-effect.)\n\n\n\n",
    "-y, --fuzzy": "              This  option tells rsync that it should look for a basis file for any destination file\n\n              that is missing.  The current algorithm looks in the same directory as the destination\n\n              file  for  either  a  file  that  has  an identical size and modified-time, or a simi\u2010\n\n              larly-named file.  If found, rsync uses the fuzzy basis file to try to  speed  up  the\n\n              transfer.\n\n\n\n              If  the option is repeated, the fuzzy scan will also be done in any matching alternate\n\n              destination  directories  that  are  specified  via  --compare-dest,  --copy-dest,  or\n\n              --link-dest.\n\n\n\n              Note  that  the  use of the --delete option might get rid of any potential fuzzy-match\n\n              files, so either use --delete-after or specify some filename exclusions if you need to\n\n              prevent this.\n\n\n\n",
    "--compare-dest=DIR": "              This option instructs rsync to use DIR on the destination machine as an additional hi\u2010\n\n              erarchy to compare destination files against doing transfers (if the files are missing\n\n              in  the  destination  directory).   If a file is found in DIR that is identical to the\n\n              sender\u2019s file, the file will NOT be transferred to the destination directory.  This is\n\n              useful  for  creating  a sparse backup of just files that have changed from an earlier\n\n              backup.  This option is typically used to copy into an empty (or newly created) direc\u2010\n\n              tory.\n\n\n\n              Beginning in version 2.6.4, multiple --compare-dest directories may be provided, which\n\n              will cause rsync to search the list in the order specified for an exact match.   If  a\n\n              match  is  found  that  differs  only  in attributes, a local copy is made and the at\u2010\n\n              tributes updated.  If a match is not found, a basis file from one of the DIRs will  be\n\n              selected to try to speed up the transfer.\n\n\n\n              If  DIR  is  a  relative  path, it is relative to the destination directory.  See also\n\n              --copy-dest and --link-dest.\n\n\n\n              NOTE: beginning with version 3.1.0, rsync will remove a file from a non-empty destina\u2010\n\n              tion hierarchy if an exact match is found in one of the compare-dest hierarchies (mak\u2010\n\n              ing the end result more closely match a fresh copy).\n\n\n\n",
    "--copy-dest=DIR": "              This option behaves like --compare-dest, but rsync  will  also  copy  unchanged  files\n\n              found  in DIR to the destination directory using a local copy.  This is useful for do\u2010\n\n              ing transfers to a new destination while leaving existing files intact, and then doing\n\n              a flash-cutover when all files have been successfully transferred.\n\n\n\n              Multiple --copy-dest directories may be provided, which will cause rsync to search the\n\n              list in the order specified for an unchanged file.  If a match is not found,  a  basis\n\n              file from one of the DIRs will be selected to try to speed up the transfer.\n\n\n\n              If  DIR  is  a  relative  path, it is relative to the destination directory.  See also\n\n              --compare-dest and --link-dest.\n\n\n\n",
    "--link-dest=DIR": "              This option behaves like --copy-dest, but unchanged files are hard linked from DIR  to\n\n              the  destination  directory.   The files must be identical in all preserved attributes\n\n              (e.g. permissions, possibly ownership) in order for the files to be  linked  together.\n\n              An example:\n\n\n\n                rsync -av --link-dest=$PWD/prior_dir host:src_dir/ new_dir/\n\n\n\n              If  file\u2019s  aren\u2019t  linking,  double-check  their  attributes.  Also check if some at\u2010\n\n              tributes are getting forced outside of rsync\u2019s  control,  such  a  mount  option  that\n\n              squishes  root  to  a  single user, or mounts a removable drive with generic ownership\n\n              (such as OS X\u2019s \"Ignore ownership on this volume\" option).\n\n\n\n              Beginning in version 2.6.4, multiple --link-dest directories may  be  provided,  which\n\n              will  cause  rsync to search the list in the order specified for an exact match (there\n\n              is a limit of 20 such directories).  If a match is found  that  differs  only  in  at\u2010\n\n              tributes, a local copy is made and the attributes updated.  If a match is not found, a\n\n              basis file from one of the DIRs will be selected to try to speed up the transfer.\n\n\n\n              This option works best when copying into an empty destination hierarchy,  as  existing\n\n              files  may  get  their  attributes  tweaked, and that can affect alternate destination\n\n              files via hard-links.  Also, itemizing of changes can get a bit  muddled.   Note  that\n\n              prior  to  version 3.1.0, an alternate-directory exact match would never be found (nor\n\n              linked into the destination) when a destination file already exists.\n\n\n\n              Note that if you combine this option with --ignore-times,  rsync  will  not  link  any\n\n              files  together  because  it  only  links identical files together as a substitute for\n\n              transferring the file, never as an additional check after the file is updated.\n\n\n\n              If DIR is a relative path, it is relative to  the  destination  directory.   See  also\n\n              --compare-dest and --copy-dest.\n\n\n\n              Note  that rsync versions prior to 2.6.1 had a bug that could prevent --link-dest from\n\n              working properly for a non-super-user when -o was specified (or implied by  -a).   You\n\n              can work-around this bug by avoiding the -o option when sending to an old rsync.\n\n\n\n",
    "-z, --compress": "              With  this option, rsync compresses the file data as it is sent to the destination ma\u2010\n\n              chine, which reduces the amount of data being transmitted -- something that is  useful\n\n              over a slow connection.\n\n\n\n              Note  that  this  option  typically  achieves  better  compression  ratios than can be\n\n              achieved by using a compressing remote shell or a  compressing  transport  because  it\n\n              takes  advantage  of the implicit information in the matching data blocks that are not\n\n              explicitly sent over the connection.  This matching-data compression comes at  a  cost\n\n              of CPU, though, and can be disabled by repeating the -z option, but only if both sides\n\n              are at least version 3.1.1.\n\n\n\n              Note that if your version of rsync was compiled with an external zlib (instead of  the\n\n              zlib  that  comes packaged with rsync) then it will not support the old-style compres\u2010\n\n              sion, only the new-style (repeated-option) compression.  In the future this  new-style\n\n              compression will likely become the default.\n\n\n\n              The  client  rsync requests new-style compression on the server via the --new-compress\n\n              option, so if you see that option rejected it means that the server is not new  enough\n\n              to  support  -zz.  Rsync also accepts the --old-compress option for a future time when\n\n              new-style compression becomes the default.\n\n\n\n              See the --skip-compress option for the default list of file suffixes that will not  be\n\n              compressed.\n\n\n\n",
    "--compress-level=NUM": "              Explicitly set the compression level to use (see --compress) instead of letting it de\u2010\n\n              fault.  If NUM is non-zero, the --compress option is implied.\n\n\n\n",
    "--skip-compress=LIST": "              Override the list of file suffixes that will not be compressed.  The  LIST  should  be\n\n              one or more file suffixes (without the dot) separated by slashes (/).\n\n\n\n              You may specify an empty string to indicate that no file should be skipped.\n\n\n\n              Simple  character-class  matching is supported: each must consist of a list of letters\n\n              inside the square brackets (e.g. no special classes, such  as  \"[:alpha:]\",  are  sup\u2010\n\n              ported, and \u2019-\u2019 has no special meaning).\n\n\n\n              The characters asterisk (*) and question-mark (?) have no special meaning.\n\n\n\n              Here\u2019s  an example that specifies 6 suffixes to skip (since 1 of the 5 rules matches 2\n\n              suffixes):\n\n\n\n                  --skip-compress=gz/jpg/mp[34]/7z/bz2\n\n\n\n              The default list of suffixes that will not be compressed is this (in this  version  of\n\n              rsync):\n\n\n\n              7z  ace  avi  bz2 deb gpg gz iso jpeg jpg lz lzma lzo mov mp3 mp4 ogg png rar rpm rzip\n\n              tbz tgz tlz txz xz z zip\n\n\n\n              This list will be replaced by your --skip-compress list in all but  one  situation:  a\n\n              copy from a daemon rsync will add your skipped suffixes to its list of non-compressing\n\n              files (and its list may be configured to a different default).\n\n\n\n",
    "--numeric-ids": "              With this option rsync will transfer numeric group and user IDs rather than using user\n\n              and group names and mapping them at both ends.\n\n\n\n              By  default  rsync  will use the username and groupname to determine what ownership to\n\n              give files. The special uid 0 and the special group 0 are never mapped via  user/group\n\n              names even if the --numeric-ids option is not specified.\n\n\n\n              If a user or group has no name on the source system or it has no match on the destina\u2010\n\n              tion system, then the numeric ID from the source system is used instead.  See also the\n\n              comments on the \"use chroot\" setting in the rsyncd.conf manpage for information on how\n\n              the chroot setting affects rsync\u2019s ability to look up  the  names  of  the  users  and\n\n              groups and what you can do about it.\n\n\n\n",
    "--usermap=STRING, --groupmap=STRING": "              These  options  allow  you  to specify users and groups that should be mapped to other\n\n              values by the receiving side.  The STRING is one or more FROM:TO pairs of values sepa\u2010\n\n              rated  by commas.  Any matching FROM value from the sender is replaced with a TO value\n\n              from the receiver.  You may specify usernames or user IDs for the FROM and TO  values,\n\n              and  the  FROM value may also be a wild-card string, which will be matched against the\n\n              sender\u2019s names (wild-cards do NOT match against ID numbers, though see below for why a\n\n              \u2019*\u2019  matches everything).  You may instead specify a range of ID numbers via an inclu\u2010\n\n              sive range: LOW-HIGH.  For example:\n\n\n\n                --usermap=0-99:nobody,wayne:admin,*:normal --groupmap=usr:1,1:usr\n\n\n\n              The first match in the list is the one that is used.  You should specify all your user\n\n              mappings  using a single --usermap option, and/or all your group mappings using a sin\u2010\n\n              gle --groupmap option.\n\n\n\n              Note that the sender\u2019s name for the 0 user and group are not transmitted  to  the  re\u2010\n\n              ceiver,  so you should either match these values using a 0, or use the names in effect\n\n              on the receiving side (typically \"root\").  All other FROM names match those in use  on\n\n              the sending side.  All TO names match those in use on the receiving side.\n\n\n\n              Any  IDs  that  do  not have a name on the sending side are treated as having an empty\n\n              name for the purpose of matching.  This allows them to be matched via a \"*\"  or  using\n\n              an empty name.  For instance:\n\n\n\n                --usermap=:nobody --groupmap=*:nobody\n\n\n\n              When  the --numeric-ids option is used, the sender does not send any names, so all the\n\n              IDs are treated as having an empty name.  This means that you will need to specify nu\u2010\n\n              meric FROM values if you want to map these nameless IDs to different values.\n\n\n\n              For  the --usermap option to have any effect, the -o (--owner) option must be used (or\n\n              implied), and the receiver will need to be running  as  a  super-user  (see  also  the\n\n              --fake-super option).  For the --groupmap option to have any effect, the -g (--groups)\n\n              option must be used (or implied), and the receiver will need to  have  permissions  to\n\n              set that group.\n\n\n\n",
    "--chown=USER:GROUP": "              This  option forces all files to be owned by USER with group GROUP.  This is a simpler\n\n              interface than using --usermap and --groupmap directly, but it  is  implemented  using\n\n              those  options  internally,  so  you  cannot mix them.  If either the USER or GROUP is\n\n              empty, no mapping for the omitted user/group will  occur.   If  GROUP  is  empty,  the\n\n              trailing colon may be omitted, but if USER is empty, a leading colon must be supplied.\n\n\n\n              If   you   specify   \"--chown=foo:bar,   this   is  exactly  the  same  as  specifying\n\n              \"--usermap=*:foo --groupmap=*:bar\", only easier.\n\n\n\n",
    "--timeout=TIMEOUT": "              This option allows you to set a maximum I/O timeout in seconds. If no data  is  trans\u2010\n\n              ferred  for  the specified time then rsync will exit. The default is 0, which means no\n\n              timeout.\n\n\n\n",
    "--contimeout": "              This option allows you to set the amount of time that rsync will wait for its  connec\u2010\n\n              tion  to  an  rsync daemon to succeed.  If the timeout is reached, rsync exits with an\n\n              error.\n\n\n\n",
    "--address": "              By  default  rsync  will  bind  to  the wildcard address when run as a daemon with the\n\n              --daemon option.  The --address option allows you to specify a specific IP address (or\n\n              hostname)  to  bind  to.   This makes virtual hosting possible in conjunction with the\n\n              --config option.  See also the \"address\" global option in the rsyncd.conf manpage.\n\n\n\n",
    "--port=PORT": "              This  specifies  an  alternate TCP port number for the daemon to listen on rather than\n\n              the default of 873.  See also the \"port\" global option in the rsyncd.conf manpage.\n\n\n\n",
    "--sockopts": "              This  overrides  the  socket  options setting in the rsyncd.conf file and has the same\n\n              syntax.\n\n\n\n",
    "--blocking-io": "              This tells rsync to use blocking I/O when launching a remote shell transport.  If  the\n\n              remote  shell  is either rsh or remsh, rsync defaults to using blocking I/O, otherwise\n\n              it defaults to using non-blocking I/O.  (Note that ssh prefers non-blocking I/O.)\n\n\n\n",
    "--outbuf=MODE": "              This sets the output buffering mode.  The mode can be None (aka Unbuffered), Line,  or\n\n              Block  (aka Full).  You may specify as little as a single letter for the mode, and use\n\n              upper or lower case.\n\n\n\n              The main use of this option is to change Full buffering to Line buffering when rsync\u2019s\n\n              output is going to a file or pipe.\n\n\n\n",
    "-i, --itemize-changes": "              Requests  a  simple itemized list of the changes that are being made to each file, in\u2010\n\n              cluding attribute changes.  This is exactly the same  as  specifying  --out-format='%i\n\n              %n%L'.  If you repeat the option, unchanged files will also be output, but only if the\n\n              receiving rsync is at least version 2.6.7 (you can use  -vv  with  older  versions  of\n\n              rsync, but that also turns on the output of other verbose messages).\n\n\n\n              The  \"%i\"  escape has a cryptic output that is 11 letters long.  The general format is\n\n              like the string YXcstpoguax, where Y is replaced by the type of update being  done,  X\n\n              is  replaced  by the file-type, and the other letters represent attributes that may be\n\n              output if they are being modified.\n\n\n\n              The update types that replace the Y are as follows:\n\n\n\n              o      A < means that a file is being transferred to the remote host (sent).\n\n\n\n              o      A > means that a file is being transferred to the local host (received).\n\n\n\n              o      A c means that a local change/creation is occurring for the item (such  as  the\n\n                     creation of a directory or the changing of a symlink, etc.).\n\n\n\n              o      A h means that the item is a hard link to another item (requires --hard-links).\n\n\n\n              o      A  .  means that the item is not being updated (though it might have attributes\n\n                     that are being modified).\n\n\n\n              o      A * means that the rest of the itemized-output area contains  a  message  (e.g.\n\n                     \"deleting\").\n\n\n\n              The  file-types  that replace the X are: f for a file, a d for a directory, an L for a\n\n              symlink, a D for a device, and a S for a special file (e.g. named sockets and fifos).\n\n\n\n              The other letters in the string above are the actual letters that will  be  output  if\n\n              the  associated attribute for the item is being updated or a \".\" for no change.  Three\n\n              exceptions to this are: (1) a newly created item replaces each letter with a \"+\",  (2)\n\n              an identical item replaces the dots with spaces, and (3) an unknown attribute replaces\n\n              each letter with a \"?\" (this can happen when talking to an older rsync).\n\n\n\n              The attribute that is associated with each letter is as follows:\n\n\n\n              o      A c means either that  a  regular  file  has  a  different  checksum  (requires\n\n                     --checksum)  or  that  a  symlink, device, or special file has a changed value.\n\n                     Note that if you are sending files to an rsync prior to 3.0.1, this change flag\n\n                     will be present only for checksum-differing regular files.\n\n\n\n              o      A  s  means  the size of a regular file is different and will be updated by the\n\n                     file transfer.\n\n\n\n              o      A t means the modification time is  different  and  is  being  updated  to  the\n\n                     sender\u2019s value (requires --times).  An alternate value of T means that the mod\u2010\n\n                     ification time will be set to the transfer time, which happens when a file/sym\u2010\n\n                     link/device  is  updated  without --times and when a symlink is changed and the\n\n                     receiver can\u2019t set its time.  (Note: when using  an  rsync  3.0.0  client,  you\n\n                     might  see  the  s  flag  combined with t instead of the proper T flag for this\n\n                     time-setting failure.)\n\n\n\n              o      A p means the permissions are different and are being updated to  the  sender\u2019s\n\n                     value (requires --perms).\n\n\n\n              o      An  o  means  the owner is different and is being updated to the sender\u2019s value\n\n                     (requires --owner and super-user privileges).\n\n\n\n              o      A g means the group is different and is being updated  to  the  sender\u2019s  value\n\n                     (requires --group and the authority to set the group).\n\n\n\n              o      The u slot is reserved for future use.\n\n\n\n              o      The a means that the ACL information changed.\n\n\n\n              o      The x means that the extended attribute information changed.\n\n\n\n              One  other  output  is possible:  when deleting files, the \"%i\" will output the string\n\n              \"*deleting\" for each item that is being removed (assuming that you are  talking  to  a\n\n              recent  enough  rsync  that  it logs deletions instead of outputting them as a verbose\n\n              message).\n\n\n\n",
    "--out-format=FORMAT": "              This allows you to specify exactly what the rsync client outputs  to  the  user  on  a\n\n              per-update  basis.   The  format is a text string containing embedded single-character\n\n              escape sequences prefixed with a percent (%) character.   A default format  of  \"%n%L\"\n\n              is  assumed  if either --info=name or -v is specified (this tells you just the name of\n\n              the file and, if the item is a link, where it points).  For a full list of the  possi\u2010\n\n              ble escape characters, see the \"log format\" setting in the rsyncd.conf manpage.\n\n\n\n              Specifying  the --out-format option implies the --info=name option, which will mention\n\n              each file, dir, etc. that gets updated in a significant way  (a  transferred  file,  a\n\n              recreated  symlink/device,  or  a  touched  directory).   In  addition,  if  the item\u2010\n\n              ize-changes escape (%i) is included in the string (e.g. if the  --itemize-changes  op\u2010\n\n              tion  was used), the logging of names increases to mention any item that is changed in\n\n              any way (as long as the receiving side is at least 2.6.4).  See the  --itemize-changes\n\n              option for a description of the output of \"%i\".\n\n\n\n              Rsync  will  output the out-format string prior to a file\u2019s transfer unless one of the\n\n              transfer-statistic escapes is requested, in which case the logging is done at the  end\n\n              of  the  file\u2019s  transfer.  When this late logging is in effect and --progress is also\n\n              specified, rsync will also output the name of the file being transferred prior to  its\n\n              progress information (followed, of course, by the out-format output).\n\n\n\n",
    "--log-file=FILE": "              This option tells the rsync daemon to use the given log-file name instead of using the\n\n              \"log file\" setting in the config file.\n\n\n\n",
    "--log-file-format=FORMAT": "              This option tells the rsync daemon to use the given FORMAT string instead of using the\n\n              \"log format\" setting in the config file.  It also enables  \"transfer  logging\"  unless\n\n              the string is empty, in which case transfer logging is turned off.\n\n\n\n",
    "--stats": "              This tells rsync to print a verbose set of statistics on the file  transfer,  allowing\n\n              you to tell how effective rsync\u2019s delta-transfer algorithm is for your data.  This op\u2010\n\n              tion is  equivalent  to  --info=stats2  if  combined  with  0  or  1  -v  options,  or\n\n              --info=stats3 if combined with 2 or more -v options.\n\n\n\n              The current statistics are as follows:\n\n\n\n              o      Number  of  files is the count of all \"files\" (in the generic sense), which in\u2010\n\n                     cludes directories, symlinks, etc.  The total count will be followed by a  list\n\n                     of  counts by filetype (if the total is non-zero).  For example: \"(reg: 5, dir:\n\n                     3, link: 2, dev: 1, special: 1)\" lists the totals for regular  files,  directo\u2010\n\n                     ries,  symlinks,  devices, and special files.  If any of value is 0, it is com\u2010\n\n                     pletely omitted from the list.\n\n\n\n              o      Number of created files is the count of how many \"files\" (generic  sense)  were\n\n                     created (as opposed to updated).  The total count will be followed by a list of\n\n                     counts by filetype (if the total is non-zero).\n\n\n\n              o      Number of deleted files is the count of how many \"files\" (generic  sense)  were\n\n                     created (as opposed to updated).  The total count will be followed by a list of\n\n                     counts by filetype (if the total is non-zero).  Note that  this  line  is  only\n\n                     output  if  deletions are in effect, and only if protocol 31 is being used (the\n\n                     default for rsync 3.1.x).\n\n\n\n              o      Number of regular files transferred is the count of normal files that were  up\u2010\n\n                     dated  via  rsync\u2019s delta-transfer algorithm, which does not include dirs, sym\u2010\n\n                     links, etc.  Note that rsync 3.1.0 added the word \"regular\" into this heading.\n\n\n\n              o      Total file size is the total sum of all file sizes in the transfer.  This  does\n\n                     not  count any size for directories or special files, but does include the size\n\n                     of symlinks.\n\n\n\n              o      Total transferred file size is the total sum of all files sizes  for  just  the\n\n                     transferred files.\n\n\n\n              o      Literal  data  is how much unmatched file-update data we had to send to the re\u2010\n\n                     ceiver for it to recreate the updated files.\n\n\n\n              o      Matched data is how much data the receiver got locally when recreating the  up\u2010\n\n                     dated files.\n\n\n\n              o      File list size is how big the file-list data was when the sender sent it to the\n\n                     receiver.  This is smaller than the in-memory size for the  file  list  due  to\n\n                     some compressing of duplicated data when rsync sends the list.\n\n\n\n              o      File list generation time is the number of seconds that the sender spent creat\u2010\n\n                     ing the file list.  This requires a modern rsync on the sending side  for  this\n\n                     to be present.\n\n\n\n              o      File  list transfer time is the number of seconds that the sender spent sending\n\n                     the file list to the receiver.\n\n\n\n              o      Total bytes sent is the count of all the bytes that rsync sent from the  client\n\n                     side to the server side.\n\n\n\n              o      Total  bytes received is the count of all non-message bytes that rsync received\n\n                     by the client side from the server side.  \"Non-message\"  bytes  means  that  we\n\n                     don\u2019t  count  the bytes for a verbose message that the server sent to us, which\n\n                     makes the stats more consistent.\n\n\n\n",
    "-8, --8-bit-output": "              This tells rsync to leave all high-bit characters unescaped in the output  instead  of\n\n              trying to test them to see if they\u2019re valid in the current locale and escaping the in\u2010\n\n              valid ones.  All control characters (but never tabs) are always escaped, regardless of\n\n              this option\u2019s setting.\n\n\n\n              The escape idiom that started in 2.6.7 is to output a literal backslash (\\) and a hash\n\n              (#), followed by exactly 3 octal digits.  For  example,  a  newline  would  output  as\n\n              \"\\#012\".   A  literal backslash that is in a filename is not escaped unless it is fol\u2010\n\n              lowed by a hash and 3 digits (0-9).\n\n\n\n",
    "-h, --human-readable": "              Output numbers in a more human-readable format.  There are  3  possible  levels:   (1)\n\n              output  numbers with a separator between each set of 3 digits (either a comma or a pe\u2010\n\n              riod, depending on if the decimal point is represented by a period or  a  comma);  (2)\n\n              output  numbers  in units of 1000 (with a character suffix for larger units -- see be\u2010\n\n              low); (3) output numbers in units of 1024.\n\n\n\n              The default is human-readable level 1.  Each -h option increases  the  level  by  one.\n\n              You  can  take the level down to 0 (to output numbers as pure digits) by specifing the\n\n              --no-human-readable (--no-h) option.\n\n\n\n              The unit letters that are appended in levels 2 and  3  are:  K  (kilo),  M  (mega),  G\n\n              (giga),  or  T  (tera).   For  example,  a  1234567-byte file would output as 1.23M in\n\n              level-2 (assuming that a period is your local decimal point).\n\n\n\n              Backward compatibility note:  versions of rsync prior to  3.1.0  do  not  support  hu\u2010\n\n              man-readable level 1, and they default to level 0.  Thus, specifying one or two -h op\u2010\n\n              tions will behave in a comparable manner in old and new versions as long as you didn\u2019t\n\n              specify  a  --no-h option prior to one or more -h options.  See the --list-only option\n\n              for one difference.\n\n\n\n",
    "--partial": "              By default, rsync will delete any partially transferred file if the transfer is inter\u2010\n\n              rupted.  In  some  circumstances  it  is  more desirable to keep partially transferred\n\n              files. Using the --partial option tells rsync to keep the partial  file  which  should\n\n              make a subsequent transfer of the rest of the file much faster.\n\n\n\n",
    "--partial-dir=DIR": "              A  better way to keep partial files than the --partial option is to specify a DIR that\n\n              will be used to hold the partial data (instead of writing it out  to  the  destination\n\n              file).  On the next transfer, rsync will use a file found in this dir as data to speed\n\n              up the resumption of the transfer and then delete it after it has served its purpose.\n\n\n\n              Note that if --whole-file is specified (or implied),  any  partial-dir  file  that  is\n\n              found  for a file that is being updated will simply be removed (since rsync is sending\n\n              files without using rsync\u2019s delta-transfer algorithm).\n\n\n\n              Rsync will create the DIR if it is missing (just the last dir -- not the whole  path).\n\n              This  makes it easy to use a relative path (such as \"--partial-dir=.rsync-partial\") to\n\n              have rsync create the partial-directory  in  the  destination  file\u2019s  directory  when\n\n              needed, and then remove it again when the partial file is deleted.\n\n\n\n              If  the  partial-dir  value is not an absolute path, rsync will add an exclude rule at\n\n              the end of all your existing excludes.  This will prevent  the  sending  of  any  par\u2010\n\n              tial-dir  files that may exist on the sending side, and will also prevent the untimely\n\n              deletion of partial-dir items on the receiving side.  An  example:  the  above  --par\u2010\n\n              tial-dir  option  would  add the equivalent of \"-f '-p .rsync-partial/'\" at the end of\n\n              any other filter rules.\n\n\n\n              If you are supplying your own exclude  rules,  you  may  need  to  add  your  own  ex\u2010\n\n              clude/hide/protect rule for the partial-dir because (1) the auto-added rule may be in\u2010\n\n              effective at the end of your other rules, or (2) you may wish to override rsync\u2019s  ex\u2010\n\n              clude  choice.   For  instance,  if you want to make rsync clean-up any left-over par\u2010\n\n              tial-dirs that may be lying around, you should specify --delete-after and add a \"risk\"\n\n              filter   rule,   e.g.   -f  'R  .rsync-partial/'.   (Avoid  using  --delete-before  or\n\n              --delete-during unless you don\u2019t need rsync to use any of  the  left-over  partial-dir\n\n              data during the current run.)\n\n\n\n              IMPORTANT: the --partial-dir should not be writable by other users or it is a security\n\n              risk.  E.g. AVOID \"/tmp\".\n\n\n\n              You can also set the partial-dir value  the  RSYNC_PARTIAL_DIR  environment  variable.\n\n              Setting  this in the environment does not force --partial to be enabled, but rather it\n\n              affects where partial files go when --partial is specified.  For instance, instead  of\n\n              using  --partial-dir=.rsync-tmp  along  with  --progress,  you  could  set  RSYNC_PAR\u2010\n\n              TIAL_DIR=.rsync-tmp in your environment and then just use the -P option to turn on the\n\n              use  of  the  .rsync-tmp dir for partial transfers.  The only times that the --partial\n\n              option does not look for this environment value are (1) when --inplace  was  specified\n\n              (since --inplace conflicts with --partial-dir), and (2) when --delay-updates was spec\u2010\n\n              ified (see below).\n\n\n\n              For the purposes of the daemon-config\u2019s \"refuse options\" setting,  --partial-dir  does\n\n              not imply --partial.  This is so that a refusal of the --partial option can be used to\n\n              disallow the overwriting of destination files with a partial transfer, while still al\u2010\n\n              lowing the safer idiom provided by --partial-dir.\n\n\n\n",
    "--delay-updates": "              This  option  puts  the temporary file from each updated file into a holding directory\n\n              until the end of the transfer, at which time all the files are renamed into  place  in\n\n              rapid  succession.   This  attempts  to  make  the updating of the files a little more\n\n              atomic.  By default the files are placed into  a  directory  named  \".~tmp~\"  in  each\n\n              file\u2019s  destination  directory, but if you\u2019ve specified the --partial-dir option, that\n\n              directory will be used instead.  See the comments in the --partial-dir section  for  a\n\n              discussion  of  how this \".~tmp~\" dir will be excluded from the transfer, and what you\n\n              can do if you want rsync to cleanup old \".~tmp~\" dirs  that  might  be  lying  around.\n\n              Conflicts with --inplace and --append.\n\n\n\n              This  option uses more memory on the receiving side (one bit per file transferred) and\n\n              also requires enough free disk space on the receiving side to hold an additional  copy\n\n              of  all  the  updated  files.   Note  also that you should not use an absolute path to\n\n              --partial-dir unless (1) there is no chance of any of the files in the transfer having\n\n              the  same name (since all the updated files will be put into a single directory if the\n\n              path is absolute) and (2) there are no mount points in the hierarchy  (since  the  de\u2010\n\n              layed updates will fail if they can\u2019t be renamed into place).\n\n\n\n              See  also  the  \"atomic-rsync\" perl script in the \"support\" subdir for an update algo\u2010\n\n              rithm that is even more atomic (it  uses  --link-dest  and  a  parallel  hierarchy  of\n\n              files).\n\n\n\n",
    "-m, --prune-empty-dirs": "              This  option  tells  the  receiving  rsync  to  get  rid of empty directories from the\n\n              file-list, including nested directories that have no non-directory children.  This  is\n\n              useful  for  avoiding  the creation of a bunch of useless directories when the sending\n\n              rsync is recursively scanning a hierarchy of files using include/exclude/filter rules.\n\n\n\n              Note that the use of transfer rules, such as the --min-size option,  does  not  affect\n\n              what  goes into the file list, and thus does not leave directories empty, even if none\n\n              of the files in a directory match the transfer rule.\n\n\n\n              Because the file-list is actually being pruned, this option also affects what directo\u2010\n\n              ries  get  deleted when a delete is active.  However, keep in mind that excluded files\n\n              and directories can prevent existing items from being deleted due to an  exclude  both\n\n              hiding  source files and protecting destination files.  See the perishable filter-rule\n\n              option for how to avoid this.\n\n\n\n              You can prevent the pruning of certain empty directories from the file-list by using a\n\n              global  \"protect\"  filter.   For instance, this option would ensure that the directory\n\n              \"emptydir\" was kept in the file-list:\n\n\n\n              --filter \u2019protect emptydir/\u2019\n\n\n\n              Here\u2019s an example that copies all .pdf files in a hierarchy, only creating the  neces\u2010\n\n              sary  destination directories to hold the .pdf files, and ensures that any superfluous\n\n              files and directories in the destination are removed (note the hide filter of  non-di\u2010\n\n              rectories being used instead of an exclude):\n\n\n\n              rsync -avm --del --include=\u2019*.pdf\u2019 -f \u2019hide,! */\u2019 src/ dest\n\n\n\n              If  you didn\u2019t want to remove superfluous destination files, the more time-honored op\u2010\n\n              tions of \"--include='*/' --exclude='*'\" would work fine in place  of  the  hide-filter\n\n              (if that is more natural to you).\n\n\n\n",
    "--progress": "              This  option  tells  rsync  to print information showing the progress of the transfer.\n\n              This gives a bored user something to watch.  With a modern rsync this is the  same  as\n\n              specifying  --info=flist2,name,progress, but any user-supplied settings for those info\n\n              flags takes precedence (e.g. \"--info=flist0 --progress\").\n\n\n\n              While rsync is transferring a regular file, it updates a progress line that looks like\n\n              this:\n\n\n\n                    782448  63%  110.64kB/s    0:00:04\n\n\n\n              In  this  example,  the receiver has reconstructed 782448 bytes or 63% of the sender\u2019s\n\n              file, which is being reconstructed at a rate of 110.64 kilobytes per second,  and  the\n\n              transfer will finish in 4 seconds if the current rate is maintained until the end.\n\n\n\n              These statistics can be misleading if rsync\u2019s delta-transfer algorithm is in use.  For\n\n              example, if the sender\u2019s file consists of the basis file followed by additional  data,\n\n              the  reported  rate will probably drop dramatically when the receiver gets to the lit\u2010\n\n              eral data, and the transfer will probably take much longer to finish than the receiver\n\n              estimated as it was finishing the matched part of the file.\n\n\n\n              When  the file transfer finishes, rsync replaces the progress line with a summary line\n\n              that looks like this:\n\n\n\n                    1,238,099 100%  146.38kB/s    0:00:08  (xfr#5, to-chk=169/396)\n\n\n\n              In this example, the file was 1,238,099 bytes long  in  total,  the  average  rate  of\n\n              transfer for the whole file was 146.38 kilobytes per second over the 8 seconds that it\n\n              took to complete, it was the 5th transfer of a regular file during the  current  rsync\n\n              session,  and  there  are 169 more files for the receiver to check (to see if they are\n\n              up-to-date or not) remaining out of the 396 total files in the file-list.\n\n\n\n              In an incremental recursion scan, rsync won\u2019t know the total number of  files  in  the\n\n              file-list until it reaches the ends of the scan, but since it starts to transfer files\n\n              during the scan, it will display a line with the text \"ir-chk\" (for incremental recur\u2010\n\n              sion  check)  instead  of  \"to-chk\" until the point that it knows the full size of the\n\n              list, at which point it will switch to using \"to-chk\".  Thus, seeing \"ir-chk\" lets you\n\n              know  that  the  total count of files in the file list is still going to increase (and\n\n              each time it does, the count of files left to check  will increase by  the  number  of\n\n              the files added to the list).\n\n\n\n",
    "-P     The  -P  option is equivalent to --partial --progress.  Its purpose is to make it much": "              easier to specify these two options for a long transfer that may be interrupted.\n\n\n\n              There is also a --info=progress2 option that outputs statistics  based  on  the  whole\n\n              transfer,  rather  than individual files.  Use this flag without outputting a filename\n\n              (e.g. avoid -v or specify --info=name0) if you want to see how the transfer  is  doing\n\n              without  scrolling  the  screen  with  a lot of names.  (You don\u2019t need to specify the\n\n              --progress option in order to use --info=progress2.)\n\n\n\n",
    "--password-file=FILE": "              This option allows you to provide a password for accessing an rsync daemon via a  file\n\n              or  via standard input if FILE is -.  The file should contain just the password on the\n\n              first line (all other lines are ignored).  Rsync will exit with an error  if  FILE  is\n\n              world readable or if a root-run rsync command finds a non-root-owned file.\n\n\n\n              This  option  does  not  supply a password to a remote shell transport such as ssh; to\n\n              learn how to do that, consult the remote shell\u2019s  documentation.   When  accessing  an\n\n              rsync daemon using a remote shell as the transport, this option only comes into effect\n\n              after the remote shell finishes its authentication (i.e. if you have also specified  a\n\n              password in the daemon\u2019s config file).\n\n\n\n",
    "--list-only": "              This option will cause the source files to be listed instead of transferred.  This op\u2010\n\n              tion is inferred if there is a single source arg and no destination specified, so  its\n\n              main  uses  are:  (1)  to  turn  a copy command that includes a destination arg into a\n\n              file-listing command, or (2) to be able to specify more than one source arg (note:  be\n\n              sure  to  include  the  destination).   Caution: keep in mind that a source arg with a\n\n              wild-card is expanded by the shell into multiple args, so it is never safe to  try  to\n\n              list such an arg without using this option.  For example:\n\n\n\n                  rsync -av --list-only foo* dest/\n\n\n\n              Starting  with  rsync 3.1.0, the sizes output by --list-only are affected by the --hu\u2010\n\n              man-readable option.  By default they will contain digit separators, but higher levels\n\n              of  readability  will  output the sizes with unit suffixes.  Note also that the column\n\n              width for the size output has increased from 11 to 14 characters for  all  human-read\u2010\n\n              able  levels.   Use  --no-h  if  you want just digits in the sizes, and the old column\n\n              width of 11 characters.\n\n\n\n              Compatibility note:  when requesting a remote listing of files from an rsync  that  is\n\n              version  2.6.3  or  older,  you  may encounter an error if you ask for a non-recursive\n\n              listing.  This is because a file listing implies the --dirs  option  w/o  --recursive,\n\n              and  older  rsyncs  don\u2019t have that option.  To avoid this problem, either specify the\n\n              --no-dirs option (if you don\u2019t need to expand a directory\u2019s content), or turn  on  re\u2010\n\n              cursion and exclude the content of subdirectories: -r --exclude='/*/*'.\n\n\n\n",
    "--bwlimit=RATE": "              This option allows you to specify the maximum transfer rate for the  data  the  daemon\n\n              sends over the socket.  The client can still specify a smaller --bwlimit value, but no\n\n              larger value will be allowed.  See the client version of this option (above) for  some\n\n              extra details.\n\n\n\n",
    "--write-batch=FILE": "              Record a file that  can  later  be  applied  to  another  identical  destination  with\n\n              --read-batch.   See   the   \"BATCH   MODE\"   section   for   details,   and  also  the\n\n              --only-write-batch option.\n\n\n\n",
    "--only-write-batch=FILE": "              Works like --write-batch, except that no updates are made on  the  destination  system\n\n              when  creating the batch.  This lets you transport the changes to the destination sys\u2010\n\n              tem via some other means and then apply the changes via --read-batch.\n\n\n\n              Note that you can feel free to write the batch directly to  some  portable  media:  if\n\n              this  media  fills to capacity before the end of the transfer, you can just apply that\n\n              partial transfer to the destination and repeat the whole process to get  the  rest  of\n\n              the  changes  (as  long as you don\u2019t mind a partially updated destination system while\n\n              the multi-update cycle is happening).\n\n\n\n              Also note that you only save bandwidth when pushing changes to a remote system because\n\n              this  allows the batched data to be diverted from the sender into the batch file with\u2010\n\n              out having to flow over the wire to the receiver (when pulling, the sender is  remote,\n\n              and thus can\u2019t write the batch).\n\n\n\n",
    "--read-batch=FILE": "              Apply all of the changes stored in FILE, a file previously generated by --write-batch.\n\n              If FILE is -, the batch data will be read from standard input.  See the  \"BATCH  MODE\"\n\n              section for details.\n\n\n\n",
    "--protocol=NUM": "              Force  an older protocol version to be used.  This is useful for creating a batch file\n\n              that is compatible with an older version of rsync.  For instance, if  rsync  2.6.4  is\n\n              being  used with the --write-batch option, but rsync 2.6.3 is what will be used to run\n\n              the --read-batch option, you should use \"--protocol=28\" when creating the  batch  file\n\n              to  force  the older protocol version to be used in the batch file (assuming you can\u2019t\n\n              upgrade the rsync on the reading system).\n\n\n\n",
    "--iconv=CONVERT_SPEC": "              Rsync can convert filenames between character sets using this option.   Using  a  CON\u2010\n\n              VERT_SPEC  of \".\" tells rsync to look up the default character-set via the locale set\u2010\n\n              ting.  Alternately, you can fully specify what conversion to do by giving a local  and\n\n              a  remote  charset  separated  by  a  comma  in  the  order --iconv=LOCAL,REMOTE, e.g.\n\n              --iconv=utf8,iso88591.  This order ensures that the option will stay the same  whether\n\n              you\u2019re pushing or pulling files.  Finally, you can specify either --no-iconv or a CON\u2010\n\n              VERT_SPEC of \"-\" to turn off any conversion.  The default setting of  this  option  is\n\n              site-specific, and can also be affected via the RSYNC_ICONV environment variable.\n\n\n\n              For a list of what charset names your local iconv library supports, you can run \"iconv\n\n              --list\".\n\n\n\n              If you specify the --protect-args option (-s), rsync will translate the filenames  you\n\n              specify  on  the  command-line  that  are being sent to the remote host.  See also the\n\n              --files-from option.\n\n\n\n              Note that rsync does not do any conversion of names in  filter  files  (including  in\u2010\n\n              clude/exclude files).  It is up to you to ensure that you\u2019re specifying matching rules\n\n              that can match on both sides of the transfer.  For instance, you can specify extra in\u2010\n\n              clude/exclude rules if there are filename differences on the two sides that need to be\n\n              accounted for.\n\n\n\n              When you pass an --iconv option to an rsync daemon that allows it, the daemon uses the\n\n              charset  specified  in  its \"charset\" configuration parameter regardless of the remote\n\n              charset you actually pass.  Thus, you may feel free to specify just the local  charset\n\n              for a daemon transfer (e.g. --iconv=utf8).\n\n\n\n",
    "-4, --ipv4 or -6, --ipv6": "              Tells rsync to prefer IPv4/IPv6 when creating the incoming sockets that the rsync dae\u2010\n\n              mon will use to listen for connections.  One of these options may be required in older\n\n              versions of Linux to work around an IPv6 bug in the kernel (if you see an \"address al\u2010\n\n              ready in use\" error when nothing else is using the  port,  try  specifying  --ipv6  or\n\n              --ipv4 when starting the daemon).\n\n\n\n              If rsync was complied without support for IPv6, the --ipv6 option will have no effect.\n\n              The --version output will tell you if this is the case.\n\n\n\n",
    "--checksum-seed=NUM": "              Set the checksum seed to the integer NUM.  This 4 byte checksum seed  is  included  in\n\n              each block and MD4 file checksum calculation (the more modern MD5 file checksums don\u2019t\n\n              use a seed).  By default the checksum seed is generated by the server and defaults  to\n\n              the  current  time()  .  This option is used to set a specific checksum seed, which is\n\n              useful for applications that want repeatable block checksums, or in the case where the\n\n              user  wants a more random checksum seed.  Setting NUM to 0 causes rsync to use the de\u2010\n\n              fault of time() for checksum seed.\n\n\n\n",
    "--daemon": "              This tells rsync that it is to run as a daemon.  The daemon you start running  may  be\n\n              accessed using an rsync client using the host::module or rsync://host/module/ syntax.\n\n\n\n              If  standard  input is a socket then rsync will assume that it is being run via inetd,\n\n              otherwise it will detach from the current terminal and  become  a  background  daemon.\n\n              The  daemon  will  read the config file (rsyncd.conf) on each connect made by a client\n\n              and respond to requests accordingly.  See the rsyncd.conf(5) man  page  for  more  de\u2010\n\n              tails.\n\n\n\n",
    "--config=FILE": "              This  specifies an alternate config file than the default.  This is only relevant when\n\n              --daemon is specified.  The default is /etc/rsyncd.conf unless the daemon  is  running\n\n              over  a  remote  shell program and the remote user is not the super-user; in that case\n\n              the default is rsyncd.conf in the current directory (typically $HOME).\n\n\n\n",
    "-M, --dparam=OVERRIDE": "              This option can be used to set a daemon-config parameter when  starting  up  rsync  in\n\n              daemon  mode.   It is equivalent to adding the parameter at the end of the global set\u2010\n\n              tings prior to the first module\u2019s definition.  The parameter names  can  be  specified\n\n              without spaces, if you so desire.  For instance:\n\n\n\n                  rsync --daemon -M pidfile=/path/rsync.pid\n\n\n\n",
    "--no-detach": "              When  running as a daemon, this option instructs rsync to not detach itself and become\n\n              a background process.  This option is required when running as a  service  on  Cygwin,\n\n              and  may  also  be useful when rsync is supervised by a program such as daemontools or\n\n              AIX\u2019s System Resource Controller.  --no-detach is also recommended when rsync  is  run\n\n              under a debugger.  This option has no effect if rsync is run from inetd or sshd.\n\n\n\n",
    "-h, --help": "              When specified after --daemon, print a short help page describing the  options  avail\u2010\n\n              able for starting an rsync daemon.\n\n\n\n",
    "- *": "\n\n       Here are some examples of exclude/include matching:\n\n\n\n       o      \"- *.o\" would exclude all names matching *.o\n\n\n\n       o      \"- /foo\" would exclude a file (or directory) named foo in the transfer-root directory\n\n\n\n       o      \"- foo/\" would exclude any directory named foo\n\n\n\n       o      \"-  /foo/*/bar\" would exclude any file named bar which is at two levels below a direc\u2010\n\n",
    "- *.gz": "",
    "- *.o": "\n\n       This  will  merge the contents of the /home/user/.global-filter file at the start of the list\n\n       and also turns the \".rules\" filename into a per-directory filter file.   All  rules  read  in\n\n       prior  to  the  start of the directory scan follow the global anchoring rules (i.e. a leading\n\n       slash matches at the root of the transfer).\n\n\n\n       If a per-directory merge-file is specified with a path that is  a  parent  directory  of  the\n\n       first transfer directory, rsync will scan all the parent dirs from that starting point to the\n\n       transfer directory for the indicated per-directory file.  For instance, here is a common fil\u2010\n\n       ter (see -F):\n\n\n\n",
    "--filter=': /.rsync-filter'": "\n\n       That  rule  tells  rsync  to scan for the file .rsync-filter in all directories from the root\n\n       down through the parent directory of the transfer prior to the start of the normal  directory\n\n       scan  of  the file in the directories that are sent as a part of the transfer.  (Note: for an\n\n       rsync daemon, the root is always the same as the module\u2019s \"path\".)\n\n\n\n       Some examples of this pre-scanning for per-directory files:\n\n\n\n",
    "- *.old": "",
    "--verbose and put a / in front of the name (use the --dry-run option if you\u2019re not yet  ready": "",
    "--delete-after,  because this ensures that the receiving side gets all the same exclude rules": ""
}
